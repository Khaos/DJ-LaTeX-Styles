%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: tuoslogo0.pdf
%%Creator: Adobe Acrobat 8.0
%%For: uos
%%CreationDate: 2008-6-4, 12:42:34
%%BoundingBox: 0 0 168 72
%%HiResBoundingBox: 0 0 167.1140 71.7381
%%CropBox: 0 0 167.1140 71.7381
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xapG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xap:CreatorTool="Adobe Illustrator CS3"
   xap:CreateDate="2008-06-04T12:30:58+01:00"
   xap:ModifyDate="2008-06-04T12:42:23+01:00"
   xap:MetadataDate="2008-06-04T12:42:23+01:00"
   xapMM:DocumentID="uuid:BBA5F5872932DD11866DFF3747A03458"
   xapMM:InstanceID="uuid:fce87b63-afbe-4821-ae13-e1dc494b9a2f"
   xapTPg:NPages="1"
   xapTPg:HasVisibleTransparency="False"
   xapTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 8.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">tuoslogo_cmyk</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xap:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xapGImg:width="256"
      xapGImg:height="104"
      xapGImg:format="JPEG"
      xapGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUk1Dz&#xA;x5M06ovtdsLdl6pJcxB/oXlyP3ZZHDM8gUE0kz/nJ+W6n4dY9X/jDb3U3X/jHE2ZEdBnPKJcaWuw&#xA;R5zgP84ISX88vIEcnD1bxqmiMLK5Ab/VDIrfhlg7Lz/zWg9raUf5SPw3+5ER/nR+XbKpkv54Ceqy&#xA;2V6tKeLejx/HIy7Nzj+Etke0tNLlkh/pgj7L80fy7vW4w+YbJX/lmlWBvoE3A5RLS5Y84lyYZYT3&#xA;iQfcyK0vbO8hE9nPHcwk0EsLrItf9ZSRlJBHNsVsCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2Kvmv8wGm1Lztr8N/cT3NvbXght7aSaRoY0EEbcVi5cBuxPTOu7J0&#xA;8DhEiBbxPtL2hnxZhCEjGPCDt7yksVnZQBvSiWA8TxMUSk8qbCg4jfxJ29+hzdXLJjh+5gJyvvqh&#xA;3/Du6+XN57R+Hnyf4TkMYc73kT5ftTGbT3Wyk1COaJ7BSPTkYujOGYIOPJAhblz+Hly+E/CD8I53&#xA;R+1PHqI6bLjkMx2NUREiybFmQAHDv9PqFSPM73XeywhilnxZAcQHEL5kbdeVnf7O/Y18vSaEtg7O&#xA;RefWVEuoN+7URWrQleDc5kZVWdl+Oiknf7IqvG+0uo1+fVRkAcPD6cQ9W8xMS4hWMgyOMS29Y6Ve&#xA;0ur7C0elwaeURKOTi3mduVcjvsB5+aS2tmJ76WxtLqO5MCgiVgwLABeYCxevzZOVarUEAn2ztpe0&#xA;U8Gljm1GKUZSlw0CO70kmfBw8XKiNiXkv9DcM2pOPBliYgcV+81QrY171l7bRRMIJT6kwos0Xp8k&#xA;D78xzPTj7jf/ACW+HMvs3tLUamQmcY8Cd8Mr3roSOt+VV04h6nG7S7M0ulgYxyn8xCuKNbEmtga2&#xA;r4/BBpptlFKJreP6tMNxLbM0D1H+VEUObmeCEuYDqsPampxfTkl87+99Gflrd3d55B0G6u5nuLma&#xA;ziaWeVi8jsRuzMxJJ9znC6qIGSQHK31XBIyhEnmQGS5Q2sa876Xq+qDRLLT7u6soX1JW1O4spGhk&#xA;FqltO7KXXcK8iovzIy7DIRskXtt8wgvNrLS/Muqr+YFrYa7rH1/Qrho9DRL2ZiSkbOsTBmo3Mrxq&#xA;fHMwyjHgJEalz2VM9L84ajoP5iedtFWLVNfitlsrmwsxKJRbwm3M1yfUuZEVF5SqFWpZtgK0yEsQ&#xA;ljhLaPP9iL3ZYfzO0ObStDvNNgudRufMXP8AROnRKizv6QJmLmRljRYqfGxanhXKPy8rIO3DzTac&#xA;+WfM1h5hsJbq0SSGS2nks720nAWWC4hNJIpApZaioPwsRQ5XkxmBopTbK1dirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdir5r83/8AKdeZv+Y//sXhztOyP7gPnntX/jUf6g++TX1K3gsUa5UG&#xA;WdgVlSRT6cbRhk+Ba1qWqx6dF2PKkJ66ZyVjHFEcxW7ZpuwsQ0/Fnl4c5fSbHDy2+fv93VX01LG0&#xA;mmtNWs45XlUNY3LCJlHqK4aWO4IdeK8FpxJBJBANGpyntRo9VmyQzaQzEa/ecPFvwkVGUAQbkCRd&#xA;bRBBO4B2/s5qMWDGcOq4YyieKHFXI9YyO1XvsebIluLVQi/pDSg0cjSFmvlMkjMwY+qzQ8j041FD&#xA;x2rnnMtLqAT/AIPq9wBQwHhjQr0gTod9GxxUa2ewHaWm/wBVxf6eKA1ObR47aaSVLG8nKObJoZY7&#xA;2O3kXm6qkTxpxVnYAAVA2J6Fs23ZvZ+vyyjGEdRjhYE+KEsRyD0jilMSomIFkmidwOYDh6vtLRRj&#xA;xSnilKIuO8ZUfIc/kkcFjHbXMUOoREySkVi9UK6qevOvIo56rz+ZBGeuZ9UYxrEPTHrW3uH7PveC&#xA;7O7IhlkTqZEZJco36zf8RG58965WdkLd2slrOYnKsQAQyEMpVhUEEeI8d/HM/BmGSPEHRa7Rz0+U&#xA;wkK7uXLpye7/AJVf+S48u/8AMFF+rOH1f97L3vq+m/uo/wBUfcyrMZvU7mV4reWWOF7h40ZkgjKB&#xA;5CoqEUyMicm6DkwHiRhAV51+XNh5u07zb5mudV8vXFlYa/e/W7a6NxZyiJUVqLMkczOC232A258N&#xA;8y9QYGEalZiPNAQunWPnS283+edXfytcNba/BbppxFzYc+VpAYAHBn+ES8uVa7U75KUoGEBxfTz5&#xA;9fggc2NaD+XPm2Cz8qTanoFxKdBjurLUNOivYIpJYrmR5UntpYrhBVC1HV3Wu1K9rp6iBMql9W/L&#xA;79lAeneQfL7aRFqkg039Ew39368FlJL9YnCiJEMk8oknUyO6saK5AFNzmFnnxVvdBkGVZQrsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVfO+tJbn8xfMrzOB6WoLIkTJ6glKwwExkHanGpJP&#xA;QA502nzGGkFXv17nmNdoo5+0I2Y+mAPCa9W8tv17GkLHKZ7g0eEzpRUhuFVYp03FFeq8TxP+Qf5T&#xA;zyzBi4Y8cro/xR5j3j9h89nH7S1ZnM4MfMbHFOql3cB6dCBxR6Vu9C8h+W/I9xpEU2pwWrXV1wmF&#xA;rctUgsoOyytVhVuPSm2c7LtDLKcrl6uKY26iM5AcvIPS6fs7GNPEeH+7AGxF0SLO567sr1Ty55Nt&#xA;GsJp9L063t4ZzWR4IERR6MlNyoA+Kn05A6iQBJkfm5MNOJERjG+4Afcs1zyb5RutJurqHS7MTfVp&#xA;Ht7mGNEO8Z4MHjAqPDJYtTPYCR4T5sJaeHHxGI4x1rcPG9TsEsJbq2VUtoIHYCWcc7mZ6V4IG+Kg&#xA;DcSQAP523Aze6HMdRhBl65XIcI2iKkYgmvd+oPJa2P5TUSMKwwNEzPqnLYEiAlff3cxvLopXMsF1&#xA;YVlIt5YQCgaMc5CVVVjLilKKCy12IruTl2knLFl4Pqvu5Dz/AFs+18GPVaUZwOCt7lXFIb0Pj033&#xA;7uT2f8qv/JceXf8AmCi/VnPav+9l73p9N/dR/qj7mVZjN7DPzX8zeZPK3lOfzBops3WxKfWra8il&#xA;kMizSpEhjeOWLiVL7gg19qb5OlxxnPhle6JGlHzXqn5jaF5ch1JLvR57tZraC6hNndLHyup44AY2&#xA;+tlqI0o6j4hvt0w4o45SqpfMfqUphb/mN5NhtXF/5i097m1KxXskbeinqkMaCJ3lZfsNtybp1yB0&#xA;872iVt3mLzrZWM+iRWWo6b/uUuYam5mP72zkJDNamOodyacd6Y48JN2Dt9/mlfH+ZvkCVJ3j16zZ&#xA;LZedwwkFEUsEq3h8TAYPy+TuKLVZ/wAw/I8EVrNLrdokd6vO2YyCjJyKc/8AJTkKcmoK98AwTN7H&#xA;ZNt335g+SbG6ntLzWrSC5t1DzQvIA4U0pQd68hSmIwTIsArapeeePJ9lNDDdaxaQvcQi6i5yqFML&#xA;Cqycq8Qrfs1PxdsRhmeQKoCDz3p1x5qlsLfUdOl0y3sGurikrfW0lRuRbh9n0hEQa9a5I4SI3Ru/&#xA;gqXeWfze8p6lpt3e3+qWtosN1cJEGJjP1ZJzHBI4ckgupX7+gyeTSzBAARadW/5i+Rrm4tLeDW7S&#xA;Se+YJZxrICZWZ/TATxq4plZ08xex2W2RZSl2KuxV2KuxV2KuxV2KuxV2KuxV2KvnDz9AkP5h+ZYK&#xA;VV54Jvioa+raQk/8MDnY9jSvAHz72sBGpif6H6ShLO8nYR2UkJvoCQsVsSeakk0EDgMyElulCpO5&#xA;UnMzJgEblE8B+z4j9PPzdRh1spgY8o8WPT+cCf5p3P8Am7g9zN9F8ja1rGjRtayC0ktTA9pdO5SV&#xA;Z4QPslVfiCklfZhSnh59CN5Y5NuHhv58X/FPtENTGGmliF8RP2en7bimsHkvz3BPZjUdYXUY+Kxr&#xA;BLPK0bTxpz5sHjcj4Y+FeRO3I1MjccnVGOTGYxFH9rj6TKMeQSldb8vMUqt5A8/QW8dpY+YylpDI&#xA;oijDvFwgT0AqKAkij4ImXiQVHX9tqSwSxwgIkXQpjqc3i5JT/nEn5vP9cvZF1a+vxAZJ55VUXsw5&#xA;hClvECiKfh9Vf2mfl12CkBs3PYOAeAcd1ETyGup4pylv5b7V83hfaTIMOoGQR4pyjGpS3jGhWw5G&#xA;XXfltt1SGeUs0lzMxeRqvLK5LOx6ksx3J+edJGEYCgKDx+TLPLK5EyPmbfQP5YwSQfl35cSSnM6f&#xA;buQK7CSMOBv3o2+cFqTeSR832HHERiAOgZNlDNhP50aTqGrfllrljp8LXF26QyJCgJZhDcRyuFA3&#xA;J4IaDMnRzEcoJRIbJZr3nXQfOOi6fo+g3Au9T1G80+SW0QMZLWOC6iuZnuBQemEWEj4qVPTJwwyx&#xA;yJlyAPx2pWM2/mHyiv5peetTnni9OTTY4LS5ZGIcpCEuEQ8fiPJQDTr2y4wn4UB5r1SHT/M2gQ/l&#xA;n+X1rPcD6/peu2095F6bmSGGG5kklY/DsAjr88tljl4sz0MT9yOjKvM+hXZ/MB7fR4vU0T8xbKKO&#xA;/uIqBE+rOrzy1pT47RmC+LNXKMcx4e/1Yz+PtTW6AvbGOz87edNP1rWYvLdlqtvBDYma2iaK509Y&#xA;DF6Ns0lADHXj6abk9tsmDcIGI4iPv81S23n8tSed/JVjrfx29lob2N2l4pLI0qOsMcxCgK7Rv0/Z&#xA;J8ckRLgmY9ZWqp57iTy9q3mddEu4tMtI7WzsZ9CvLd5bPUYRaqI4oJFXksyiQrxBrvyLAVo4DxiP&#xA;EL3JvqN0FONO17SU/N/yz6o+oyjy9DYTWzByYbuVg6WruV+2AwG/68rlA+DLr6r+Henq1+Vt/wDX&#xA;YpPI9zaymASax+n7aaB1CrLMn1f94woOQkf32x1Ma9Y/o0oR/wCTmj6nJN6GrxAx+Smu9G02VlB9&#xA;SaSfnNMp7cYViRfYnI6uY6fx0SoetZgJdirsVdirsVdirsVdirsVdirsVdirwv8AObTRZee7O/ZW&#xA;W21izEbyKAxM1m55AAlRX0pRQEjpnSdh5vTKPV5L2q0wlGGQ8gaPuP471DzDZW0WiDVdKgfSdDuo&#xA;2gjEjepfXciqa0oW4o1DVQwXY1r8Ay7HkkZmGT95kG9D6R+sj3H73DnhxwxjLi/cYJbEnfJL3bmo&#xA;n3x6k7UyqT8y9O0WxWy0+3P1ukbFXjkZWJiUFwrGGiuRVDyPIb5zHZ2jz5McR4cvTEXfCPhz5/B6&#xA;7XdpabAbyTAvkBZP2dPNpfzWZJKaysVldQAy21usUrt6hR04yCN5uJAJqjcW6Hpk8uDPEgQxTyCW&#xA;1xMKH+mMfs4uqP5R0w+qYge6Wx+XT4rovzevLaZf0rZBYJFrC8SfA+/HksqSzqVHcqpocyR2flMb&#xA;jEmu4ix8DRap9raaMxGUuEnlYNHzEvprzth1va3F7r31Oxm4Xl8Iikd3E6W9ynpigYSLUkAEqxXp&#xA;urBqA52glw4ZTnGQiJmjY4hy7jy+PvDqu14nJqY48c48coC4SFwkAZHu5j4bcilXnm1sXuxpWj2E&#xA;9hqNwyadLYzMJFF1K/pVikDMzj4uW4HiNs22HNkGAzySEh0I7vkHRHR4J66GPFGUKPrjL+jvzs8/&#xA;7Ob6P0+yhsbC2soP7m1iSGKvXjGoVfwGcbI2bfQ1fAqB1zW9M0PSbrVtTmFvY2aepPKamgrQAAbk&#xA;sSAAOpyUIGRoc1Y5F+ZEcMunnWtFvtFsdWkENhf3foGP1HqY0nWKR3hZx05j50y46fnwkEhFrte/&#xA;MnTdJ8zQeX0sLvULtvQN29oiututzJ6cRcV5H+Y0GwxhpzKPFYC2y/MdLsVdirsVdirsVSrzPpGp&#xA;atpLWmm6pJpF4JYpY7yJef8AdSByjryjLI9KMA61+VQbMcxE2Rar/LuiR6LpMVisrXMvKSa6u3AD&#xA;zTzOZZpWA7u7E07DbBknxG1TLIK7FXYq7FXYq7FXYq7FXYq7FXYqwDzVr+lXPmey02ZI7pIjNDDa&#xA;zR+vHLcBFaZxF1c20ZHGg+IsyAh8yscCIk/j8FUB5j8qXHmnydqMemKtbC8N15ZYOSGa3X05Y1Db&#xA;pDIwkRUrQV2+ALl2n1Hg5RL5uNq9NHPiljlykHnnknWLcPKhFtZm8UxXF/dxM81n6fLn6aqUYShu&#xA;n+UBnRazH4kBONkD+GP8XveF7OnLTZpYZ8MZ8uOfKIH80Gufv7u5RutQitNUi07Rmea4vbj0ItTC&#xA;MZZXZv7wbcoFP2jSr9fipUYzNYxLKKHSA5fHv+7yXBDiznHpzxTv1ZTvLfnwjp133P8ASAWNouiV&#xA;lOoySRyaZGL5JHSWFiCwrH6bMisQgkBUCvMcOVPibV5dfMyjuBvsNnrMPYWmhEjhMr+okmz+PJbe&#xA;Xn6GuorX4ri0v2NLa4iNA6BSwkA4lGAIHJaMKMvIqOTZ+nz+MfVtk6SH6e/7vc6HtTQfk43AceA8&#xA;4S6H+ieYO/Tf3p7Df6XY+XJfqskF6t8WiuNHvUeSW0DciJIJh6aEsQGcqv8ALtthOHJPNuDAx/ij&#xA;yl7x+3vcWGpw4dLcZDLCW3hyI4oe4/1u6PcdqKt+UHlmXWvMUmvsgOm6HzjsS9eE1+60LdDVYVPX&#xA;+Y7dMxe2dUABjj8XbezXZ8oROfJ9c+V/zf2/cy6W9t1TTmMcCeYpLgQy3UlTcnUbYlza/WWAHG54&#xA;enRaIiNQbOmacDn/ADf0d/wepehadqFvqFlFeW/L0phUK4KupBoysp3DKwII8cxJRo0rAfz5ic+T&#xA;bS4ZGextNUs59RC12tlcqxanbky5l6I+s99FBa/Pue2m/LK5giImutRns4tKCUZpJmnR19MjqTGr&#xA;UpjoQRl912iXJLNI0acfnrepNqN2Zk0eC7m4S0WRxOoMbDiKw77Lk5z/AHA2H1J6vW8wEuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvNvzK/LmXVBcahpg4XEscoZ4kDTxNNEYpWjH7c&#xA;csZo6D4gfjSrFlfM0+fh2KkMQ0PXPOOkPO8gc2kc4g+vLMgZYIoXd5rtvTli5BY15+rF6o+wCNly&#xA;+cIS/H3fikJVeaRc+bGvPN3lwepIQg1LS1tZIXubkxrJIYVWW4rNGjr6jUVGJHffM7Saw6c8Evp9&#xA;7pu1+yIayFjbIOR/QfL7kksb+NLlZiwhNuzpcpcI1YmKMhE0RHIBWb4wQfhrsembfV1lwkx36vI9&#xA;kg6PWgZhw8xv58j+i0+ube1mW2lXUpbiK5HCAD0ZDFZCR0RIJA6rs8ZDDmBT4uRHw5yGfSeJIHlX&#xA;2nz+fn8930vHk223tDazqcUtjbWAuY7qa1meS4uAYzK4UPEpmaIqv2QpTmivu5IGxbfdl4j4hlyA&#xA;DyntTqoDB4fOciPhXX9HxUPL3lTWPNsvo2MhsNKYhJNZljk9KQluJit3C8C5O3ImldhU5la7tKOM&#xA;cMd5Or7F9npTIy5hUeke/wB/kyePzlNDY2Xlny3E5jW3RrCzgUQxyQkmpKwyzTtKVZZipnQsOXJe&#xA;XwtoTismUvx+Pc92ET5Z8qeZ9V1a0u725jnbTPgtfq4QWMEkcs7xzkxfupHh+sMEiiJrsJCtN45M&#xA;sYggdfn+PwE09h03T7fTrGGyt6+lCtAWNWYk1ZmPdmYkse5zXylZtV1+LE2NwNQERsfTf60J+Ppe&#xA;lxPP1Ofw8ePWu1MY3e3NWB+XYvyZj1K2l0Z7SS/gYpp8RkmmZC9Wrawys4APE0aJaeBzKyHNW91+&#xA;OaEf5d0z8tde1q68xaPAs+r2lyUu7w/WYpknG5Rll4Hb+WlO2RySyRjwnklmmYypR5j816L5eigf&#xA;UpXEl0xS1t4Y3mmlZV5vwjjDMQqirHoB1yzHilPkqUzfmp5MW3jnguZr2NrYX0n1O2nuDDamv72c&#xA;RofSGx2eh9ssGmn7uiLZLp2oWWo2Nvf2My3FndRrLBMn2WRxUEZRKJBopQOuea9B0Kazi1W5Nq1/&#xA;IILRjFKyPKxoE5orIGNehOThilK66KitW1ay0mye9vTIttHUyPFDLOVABYsywrIwUAbsRQZGMTI0&#xA;Fa0XWtM1vTINU0ucXNhcgmCcBlDBWKnZgrfaU9sZwMTR5qjcirsVdirsVdirsVdirsVdirsVdirs&#xA;VdiqXal5e0bUXMl3aq05Xh9ZjLRT8Nxx9aIpJx36cqZOOQjkrAb+yfy1rbx6PaMbSF4ZAlKyQpOr&#xA;fWrxPShkklXjBHGTJy369RmVGXHHf8dwVj3nOw8t+cLo391cLp960LW0FzaG3WcyQyOk31y2ldWl&#xA;jIVRGiSORRvcC/T5Z4thycbU6THmFTF1y8vcwd9L876M0NlaabfXkBk/3H3OlpeW8Dy0C8uDpE0b&#xA;8TQtT2rm1hqtPMXOMbHudBk7H1eM1hzHgP8AO6fj4JjaeRbKP1rjzNemHUrsAxaWqfVozcOaRG6a&#xA;89Ke5+NxzSKNq++YuXWmW2McMfL9jsdJ2RjxETmTkyfzpfoZrf8A5ix6o+nW2jRxrphhuXS8hUiK&#xA;xnso1MTGJlU8UleP4nSnE8OHKuYEcHDd8/vt21vQtO8qaLLAl3d2sk090gluYLtiyl5KyN6luvG3&#xA;5B3J2j65iSynkEp+iIiKiKFRQAqgUAA2AAGVK3irEvzXtEvPy/1e0e5S09dYo0nkDNGHaeMIHCgn&#xA;izUVjTYGuX6Y1kBQWHXPmHV38xeU7Xzt5bbRb621BE07WLQpdWksssbwiCqkNAspYGhLfZG1NxkD&#xA;GOGRhKxW46otJNN1LzfpUn5l6zo93b2tnpWq3N08csPrNcSqamInmvBAg6jck+2WyjCXhxI5he9k&#xA;mqfmZqN5q2kaVbXf6FW40iHV7+9js5L9w9wB6dvHGqvRQTyZmHTYEHKY6cAEkXvXOk2x6/1bzP5i&#xA;1v8ALfUrqU6VqdxJqNnJG9qCqSKhjlmWObdlni4/C3TtlsYxhGYG426o7kbpOia3/jD8yNPtdUhh&#xA;itbfTleM2ULwyxtZN6cRiqFVI414UHUZGc48GMkd/XzUcyt0n8zdVHlPyVp0U0en3esw3El5fwWr&#xA;Ti2tbN2jRYbWJW+J+IUEgqtNxjLTjjmedeff5ra3zD5l1bW/JtuuqRuZ9P8ANFnaw3rW72ou7dZQ&#xA;YpxFIAVLKfiHSuHHjEZ7dYH4JZfJ5i82a55w13SvL9zb2Vp5ajhV/XhMxu7udDII2JZOESheJK0a&#xA;vQ0zH8OEYAy34vsC2v8AyM/8lToH/GOb/qIkx1n97JY8md5ipdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdiqF1DS7K/VBcIfUiPKCdGaOWNjsTHIhDLXoaHcbHbJRkQrCPMH5Vx6g6urwzqkQt1jZfqbtF&#xA;Uko7wK0JUhmXa3B4mnLocyYamvxf4+asX1H8n/Mc9k1gXBh+rJCrxTqzMf3BkWSR0hZkZ7bmF40D&#xA;Ox3rl0dVG7/HX9aKTYflJf3NwJbiSOB1vPrsNwJ/VkX7RWOQJb2zycPVZVPrCi0A6DK/zQHy/HX9&#xA;CWX+XfIeiaJHGsSeqYmDxoRxiRx0dY9+Tr0V5GdwNuVMoyZpSVkmUq7FXYqk/m7y1beZvL13od1K&#xA;8NveemJZI6cwqSLJQV8eFMsxZDCQkOipMfIWqXMunx6r5gm1DTtJnju7C3eCNJTPB/cPcTqay+md&#xA;9lXkftVyzxwLoUSqSr+T+pDT9fsT5nmMXmSVp9SP1SCpeQ/vCm/w8htt9GWfmxcTw/Ty3RSOsPyx&#xA;v9NuNP1Gw1949ZsbMaY13JaxvFNZIQYo5YVZKtGRs4avjXIy1IIII2Jv4rShe/lNeT6lpmow+Y5o&#xA;bvTJ5r1ZDbQv6l3dGs8rD4RRlAUJSiqPHfCNUACOHmtK0H5aa3BrGvarD5nlW48wosd7/okBAESG&#xA;OHjU7emjcR498B1AIA4fp81pDaX+T0ml2OjJaa9Muo+X5JjpN8beMhIbn++gljBHqoxJO7AiuSlq&#xA;+ImxtLmtKmu/lTf6zFW48xSpeTXkV/d3CW0QDzWyhLdUQk8I4gNlqakkknBDUiPKPSlpHXX5dXba&#xA;tc6tp+vT6dfarbQ2uvPFDEy3RhT01mRWqIZeJNCKgeGRGoFURYHJadoP5c3uiafpumWfmK8TTNKv&#xA;TdW9siRIXgJdjazOBWRCz9T93Qqz1AkSTEWR+CtM1zGS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/&#xA;2Q=="/>
    </rdf:Alt>
   </xap:Thumbnails>
   <xapMM:DerivedFrom
    stRef:instanceID="uuid:BAA5F5872932DD11866DFF3747A03458"
    stRef:documentID="uuid:B9A5F5872932DD11866DFF3747A03458"/>
   <xapTPg:MaxPageSize
    stDim:w="297.000002"
    stDim:h="209.999994"
    stDim:unit="Millimeters"/>
   <xapTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
    </rdf:Seq>
   </xapTPg:PlateNames>
   <xapTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xapG:groupName="Default Swatch Group"
       xapG:groupType="0">
      <xapG:Colorants>
       <rdf:Seq>
        <rdf:li
         xapG:swatchName="White"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="0.000000"
         xapG:magenta="0.000000"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Black"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="0.000000"
         xapG:magenta="0.000000"
         xapG:yellow="0.000000"
         xapG:black="100.000000"/>
        <rdf:li
         xapG:swatchName="Magenta"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="0.000000"
         xapG:magenta="100.000000"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Red"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="0.000000"
         xapG:magenta="100.000000"
         xapG:yellow="100.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Crimson"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="26.999998"
         xapG:magenta="94.000000"
         xapG:yellow="94.000000"
         xapG:black="25.999999"/>
        <rdf:li
         xapG:swatchName="Orange"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="0.000000"
         xapG:magenta="50.000000"
         xapG:yellow="100.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Peach"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="2.999997"
         xapG:magenta="25.999999"
         xapG:yellow="81.000000"
         xapG:black="4.000002"/>
        <rdf:li
         xapG:swatchName="Custard"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="0.000000"
         xapG:magenta="13.000000"
         xapG:yellow="63.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Yellow"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="0.000000"
         xapG:magenta="0.000000"
         xapG:yellow="100.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Lime"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="32.999998"
         xapG:magenta="0.000000"
         xapG:yellow="72.999996"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Dried Sage"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="36.000001"
         xapG:magenta="10.000002"
         xapG:yellow="47.000003"
         xapG:black="1.999998"/>
        <rdf:li
         xapG:swatchName="Green"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="80.000001"
         xapG:magenta="0.000000"
         xapG:yellow="100.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Forest"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="90.000004"
         xapG:magenta="30.000001"
         xapG:yellow="90.000004"
         xapG:black="17.000002"/>
        <rdf:li
         xapG:swatchName="Mediterranean"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="100.000000"
         xapG:magenta="0.000000"
         xapG:yellow="30.000001"
         xapG:black="5.000001"/>
        <rdf:li
         xapG:swatchName="Bright Blue"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="45.999998"
         xapG:magenta="0.000000"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Pure Cyan"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="100.000000"
         xapG:magenta="0.000000"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Night Blue"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="100.000000"
         xapG:magenta="50.000000"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Slate"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="30.000001"
         xapG:magenta="0.000000"
         xapG:yellow="0.000000"
         xapG:black="42.999995"/>
        <rdf:li
         xapG:swatchName="Periwinkle"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="42.999995"
         xapG:magenta="27.999997"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Plum"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="50.000000"
         xapG:magenta="90.000004"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Lavender"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="18.000001"
         xapG:magenta="45.999998"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Baby Pink"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="0.000000"
         xapG:magenta="25.000000"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Bisque"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="6.999999"
         xapG:magenta="24.000001"
         xapG:yellow="37.000000"
         xapG:black="1.999998"/>
        <rdf:li
         xapG:swatchName="Cafe Con Leche"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="25.000000"
         xapG:magenta="41.999996"
         xapG:yellow="48.000002"
         xapG:black="11.000001"/>
        <rdf:li
         xapG:swatchName="Malt"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="32.999998"
         xapG:magenta="44.000000"
         xapG:yellow="53.999996"
         xapG:black="19.000000"/>
        <rdf:li
         xapG:swatchName="Mocha"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="42.999995"
         xapG:magenta="51.999998"
         xapG:yellow="80.000001"
         xapG:black="38.000000"/>
        <rdf:li
         xapG:swatchName="Pigeon"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="0.000000"
         xapG:magenta="0.000000"
         xapG:yellow="0.000000"
         xapG:black="30.000001"/>
        <rdf:li
         xapG:swatchName="Battleship"
         xapG:mode="CMYK"
         xapG:type="PROCESS"
         xapG:cyan="0.000000"
         xapG:magenta="0.000000"
         xapG:yellow="0.000000"
         xapG:black="69.999999"/>
        <rdf:li
         xapG:swatchName="Global Black"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="0.000000"
         xapG:magenta="0.000000"
         xapG:yellow="0.000000"
         xapG:black="100.000000"/>
        <rdf:li
         xapG:swatchName="Global Red"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="0.000000"
         xapG:magenta="100.000000"
         xapG:yellow="100.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Global Orange"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="0.000000"
         xapG:magenta="50.000000"
         xapG:yellow="100.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Global Yellow"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="0.000000"
         xapG:magenta="0.000000"
         xapG:yellow="100.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Global Lime"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="32.999998"
         xapG:magenta="0.000000"
         xapG:yellow="72.999996"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Global Green"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="80.000001"
         xapG:magenta="0.000000"
         xapG:yellow="100.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Global Blue"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="45.999998"
         xapG:magenta="0.000000"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Global Night"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="100.000000"
         xapG:magenta="50.000000"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Global Periwinkle"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="42.999998"
         xapG:magenta="28.000000"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Global Plum"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="50.000000"
         xapG:magenta="90.000004"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Global Pink"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="0.000000"
         xapG:magenta="25.000000"
         xapG:yellow="0.000000"
         xapG:black="0.000000"/>
        <rdf:li
         xapG:swatchName="Global Malt"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="CMYK"
         xapG:cyan="32.549998"
         xapG:magenta="44.309998"
         xapG:yellow="53.729999"
         xapG:black="19.610000"/>
       </rdf:Seq>
      </xapG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xapTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -71.738 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 71.738 li
167.114 71.738 li
167.114 0 li
cp
clp
[1 0 0 1 -82.3644 0 ]ct
gsave
0 -112.427 mo
841.89 -112.427 li
841.89 482.849 li
0 482.849 li
cp
clp
103.03 65.493 mo
102.252 64.865 102.031 63.691 102.177 62.9 cv
102.342 62.015 103.008 61.55 103.697 62.106 cv
104.002 62.351 104.14 62.593 104.292 62.958 cv
104.451 62.714 li
104.568 62.808 li
104.234 64.17 li
104.071 64.038 li
104.157 63.291 104.08 62.722 103.669 62.391 cv
103.283 62.08 102.93 62.467 102.762 63.366 cv
102.604 64.218 102.752 64.954 103.148 65.274 cv
103.57 65.614 103.881 65.54 104.07 64.869 cv
104.258 65.021 li
104.067 65.797 103.532 65.897 103.03 65.493 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 1 .2 0 cmyk
f
106.5 64.1454 mo
106.101 63.9614 105.674 64.1884 105.458 65.2604 cv
105.23 66.3924 105.594 66.8214 105.931 66.9754 cv
106.423 67.2014 106.762 66.7694 106.923 65.9684 cv
107.126 64.9594 106.916 64.3354 106.5 64.1454 cv
105.838 67.2094 mo
104.9 66.7794 104.618 65.6894 104.768 64.9484 cv
104.928 64.1524 105.617 63.4634 106.513 63.8744 cv
107.589 64.3684 107.765 65.5294 107.63 66.1974 cv
107.457 67.0574 106.779 67.6414 105.838 67.2094 cv
f
111.073 67.6664 mo
110.949 67.6224 110.844 67.6304 110.795 67.8644 cv
110.535 69.0254 li
110.341 68.9794 li
110.201 68.5254 li
110.031 68.7724 109.695 68.8804 109.24 68.7194 cv
108.373 68.4124 107.952 67.4934 108.146 66.5614 cv
108.332 65.6704 109.103 65.0214 109.996 65.3374 cv
110.398 65.4804 110.625 65.7164 110.765 65.9724 cv
110.973 65.6844 li
111.121 65.7244 li
110.788 67.0764 li
110.6 67.0254 li
110.668 66.3844 110.552 65.8164 110.004 65.6224 cv
109.733 65.5274 109.116 65.5954 108.864 66.8094 cv
108.669 67.7474 108.967 68.3204 109.418 68.4794 cv
109.776 68.6064 109.935 68.4574 110.041 68.2474 cv
110.162 67.7374 li
110.211 67.5034 110.123 67.4264 109.999 67.3824 cv
109.707 67.2794 li
109.75 67.0734 li
111.298 67.5234 li
111.255 67.7304 li
cp
f
114.97 66.7948 mo
114.837 66.7718 114.737 66.7988 114.717 67.0388 cv
114.322 69.9408 li
113.953 69.8768 li
112.564 67.1148 li
112.249 69.0398 li
112.219 69.2678 112.316 69.3728 112.449 69.3958 cv
112.754 69.4698 li
112.72 69.6868 li
111.394 69.3828 li
111.428 69.1668 li
111.689 69.2228 li
111.823 69.2458 111.9 69.2068 111.943 68.9668 cv
112.328 66.6208 li
112.364 66.3908 112.274 66.3228 112.121 66.2968 cv
111.86 66.2398 li
111.896 66.0338 li
112.912 66.2378 li
114.198 68.7948 li
114.4 66.9838 li
114.419 66.7438 114.322 66.6828 114.189 66.6598 cv
113.885 66.6078 li
113.918 66.3978 li
115.263 66.6278 li
115.232 66.8398 li
cp
f
117.153 66.9608 mo
116.711 66.9268 116.293 67.3128 116.205 68.4608 cv
116.111 69.6738 116.548 69.9638 116.92 69.9928 cv
117.464 70.0338 117.763 69.4768 117.83 68.6188 cv
117.913 67.5388 117.613 66.9958 117.153 66.9608 cv
116.852 70.2608 mo
115.815 70.1818 115.381 69.2018 115.442 68.4078 cv
115.507 67.5548 116.141 66.6108 117.132 66.6868 cv
118.322 66.7768 118.654 67.8688 118.599 68.5838 cv
118.528 69.5048 117.893 70.3398 116.852 70.2608 cv
f
120.651 70.2831 mo
120.15 70.3031 119.904 70.1261 119.724 69.8771 cv
119.533 70.2541 li
119.383 70.2601 li
119.399 68.7961 li
119.595 68.7881 li
119.677 69.4751 119.928 70.0511 120.621 70.0231 cv
120.897 70.0121 121.151 69.8251 121.154 69.5291 cv
121.165 68.5231 119.342 69.2411 119.358 67.7091 cv
119.362 67.3881 119.639 66.7521 120.412 66.7201 cv
120.838 66.7031 121.075 66.8511 121.259 67.0611 cv
121.413 66.6801 li
121.558 66.6751 li
121.544 68.0591 li
121.338 68.0681 li
121.284 67.3511 121.031 66.9571 120.465 66.9801 cv
120.048 66.9961 119.905 67.2981 119.903 67.5141 cv
119.894 68.3431 121.747 67.8291 121.733 69.1751 cv
121.727 69.7371 121.334 70.2561 120.651 70.2831 cv
f
124.179 69.9349 mo
123.148 70.0889 122.573 69.3039 122.521 68.4819 cv
122.462 67.5619 123.037 66.5029 123.934 66.3909 cv
124.335 66.3399 124.575 66.3899 124.838 66.5649 cv
124.946 66.2059 li
125.098 66.1779 li
125.192 67.6549 li
124.979 67.6929 li
124.872 66.9649 124.543 66.5589 124.007 66.6539 cv
123.503 66.7439 123.223 67.4079 123.283 68.3409 cv
123.338 69.2269 123.698 69.7269 124.215 69.6339 cv
124.764 69.5359 125.083 69.1829 125.11 68.4259 cv
125.355 68.3819 li
125.356 69.2819 124.95 69.8189 124.179 69.9349 cv
f
127.188 66.0331 mo
127.076 66.0651 127.007 66.1301 127.02 66.3161 cv
127.086 67.3411 li
127.176 67.3151 li
127.677 67.1711 127.739 67.1331 127.754 66.3261 cv
127.938 66.2731 li
128.062 68.1481 li
127.878 68.2001 li
127.759 67.4321 127.717 67.4291 127.193 67.5791 cv
127.104 67.6051 li
127.18 68.7771 li
127.192 68.9721 127.274 68.9701 127.378 68.9441 cv
127.595 68.8901 127.726 68.8551 128.032 68.7561 cv
128.528 68.6141 128.631 68.3741 128.655 67.4581 cv
128.848 67.4031 li
128.983 68.7111 li
127.89 69.0661 127.063 69.2951 125.974 69.5711 cv
125.959 69.3501 li
126.254 69.2751 li
126.379 69.2391 126.476 69.1621 126.459 68.9171 cv
126.301 66.5191 li
126.285 66.2791 126.184 66.2631 126.059 66.3001 cv
125.763 66.3851 li
125.748 66.1691 li
126.811 65.8831 127.824 65.5941 128.558 65.3671 cv
128.692 66.6401 li
128.499 66.6951 li
128.359 65.8181 128.095 65.7571 127.688 65.8751 cv
127.487 65.9331 127.304 66.0001 127.188 66.0331 cv
f
130.847 64.6888 mo
130.61 64.7968 li
130.508 64.8438 130.483 64.8948 130.498 65.0088 cv
130.64 66.1058 li
130.971 65.9558 li
131.484 65.7218 131.607 65.2798 131.573 65.0198 cv
131.503 64.4848 131.122 64.5638 130.847 64.6888 cv
129.701 68.4328 mo
129.672 68.2188 li
129.975 68.1048 li
130.093 68.0508 130.159 67.9578 130.129 67.7208 cv
129.839 65.4398 li
129.809 65.2088 129.71 65.2088 129.592 65.2618 cv
129.306 65.3768 li
129.279 65.1678 li
131.234 64.2768 li
131.743 64.0448 132.185 64.2348 132.247 64.7168 cv
132.291 65.0578 132.103 65.5218 131.717 65.7558 cv
132.078 65.8368 132.197 66.0188 132.287 66.7188 cv
132.314 66.9218 132.416 66.9358 132.498 66.8908 cv
132.576 66.8478 132.631 66.7648 132.614 66.6278 cv
132.496 65.9768 li
132.712 65.8818 li
132.848 66.5608 li
132.88 66.8118 132.752 67.1188 132.316 67.3168 cv
131.976 67.4718 131.645 67.4128 131.591 66.9958 cv
131.499 66.2908 131.353 66.0918 130.964 66.2138 cv
130.672 66.3478 li
130.82 67.5218 li
130.845 67.7118 130.917 67.7188 131.015 67.6738 cv
131.4 67.5168 li
131.427 67.7298 li
130.886 67.9818 130.27 68.2288 129.701 68.4328 cv
f
135.142 61.7494 mo
135.457 62.8764 li
135.298 62.9984 li
135.094 62.1974 134.849 62.2594 134.516 62.5224 cv
134.343 62.6584 134.24 62.7444 134.09 62.8644 cv
133.997 62.9354 133.946 63.0224 133.974 63.1984 cv
134.185 64.1594 li
134.29 64.0804 li
134.652 63.7994 134.702 63.7244 134.58 62.9634 cv
134.732 62.8474 li
135.127 64.5744 li
134.976 64.6904 li
134.799 63.9874 134.764 63.9994 134.33 64.3304 cv
134.225 64.4094 li
134.446 65.5184 li
134.476 65.7034 134.54 65.6664 134.632 65.6094 cv
134.769 65.5254 135.09 65.2694 135.231 65.1564 cv
135.564 64.9014 135.635 64.6014 135.509 63.7314 cv
135.668 63.6094 li
135.984 64.8044 li
135.341 65.4184 134.323 66.1414 133.48 66.6934 cv
133.447 66.4844 li
133.702 66.3174 li
133.837 66.2144 133.873 66.1374 133.833 65.8874 cv
133.387 63.6744 li
133.351 63.4474 133.249 63.4194 133.146 63.4994 cv
132.88 63.6804 li
132.828 63.4864 li
133.471 63.0404 134.427 62.3164 135.142 61.7494 cv
f
86.9048 49.2552 mo
86.7658 49.0792 li
86.6998 48.9952 86.6648 49.0032 86.6188 49.0992 cv
86.1378 50.0002 li
86.3688 50.2802 li
86.7038 50.7042 86.9638 50.5362 87.0698 50.3162 cv
87.2878 49.8632 87.0838 49.4832 86.9048 49.2552 cv
86.3258 52.7692 mo
86.1058 52.4882 85.9878 52.0682 86.1568 51.7162 cv
86.4458 51.1192 86.4578 50.8052 86.2308 50.4462 cv
86.0398 50.2052 li
85.5308 51.1202 li
85.4538 51.2812 85.4938 51.3632 85.5578 51.4442 cv
85.8038 51.7562 li
85.7168 51.9362 li
84.5938 50.5152 li
84.6808 50.3352 li
84.8638 50.5662 li
84.9418 50.6642 85.0178 50.7092 85.1138 50.5082 cv
86.1318 48.6312 li
86.2268 48.4352 86.1828 48.3212 86.1058 48.2242 cv
85.9228 47.9932 li
86.0078 47.8172 li
87.2668 49.4102 li
87.5978 49.8302 87.7048 50.4672 87.5078 50.8762 cv
87.3678 51.1642 87.0828 51.1842 86.7908 50.9952 cv
86.9118 51.4642 86.8788 51.7262 86.5928 52.3182 cv
86.5098 52.4912 86.5338 52.5872 86.5868 52.6532 cv
86.6398 52.7202 86.7008 52.7212 86.7578 52.6052 cv
87.0298 52.0402 li
87.2068 52.2642 li
86.9168 52.8642 li
86.8148 53.0772 86.6118 53.1292 86.3258 52.7692 cv
f
86.9048 53.37 mo
87.0038 53.183 li
87.2278 53.368 li
87.3228 53.447 87.4148 53.475 87.5258 53.267 cv
88.6078 51.229 li
88.7158 51.025 88.6608 50.926 88.5668 50.847 cv
88.3428 50.662 li
88.4398 50.479 li
90.6028 52.27 li
90.0188 53.369 li
89.8738 53.248 li
90.2188 52.432 90.0988 52.135 89.7898 51.879 cv
89.4108 51.564 li
89.3258 51.494 89.2518 51.487 89.1678 51.645 cv
88.6858 52.552 li
88.7538 52.608 li
89.1338 52.922 89.1898 52.945 89.5958 52.317 cv
89.7358 52.432 li
88.8898 54.026 li
88.7508 53.911 li
89.0548 53.199 89.0308 53.162 88.6348 52.832 cv
88.5668 52.777 li
88.0458 53.758 li
87.9568 53.925 88.0068 53.996 88.0848 54.06 cv
88.5798 54.471 li
88.8848 54.724 89.1398 54.676 89.5938 53.987 cv
89.7388 54.107 li
89.1448 55.226 li
cp
f
92.373 53.4935 mo
92.154 53.3725 li
92.06 53.3205 92.016 53.3405 91.967 53.4445 cv
91.495 54.4515 li
91.801 54.6195 li
92.275 54.8815 92.588 54.6345 92.7 54.3955 cv
92.93 53.9045 92.627 53.6345 92.373 53.4935 cv
92.019 56.8925 mo
91.705 56.7195 91.508 56.3815 91.687 55.9995 cv
91.99 55.3525 91.992 55.0645 91.662 54.8225 cv
91.392 54.6725 li
90.897 55.7275 li
90.816 55.9015 90.877 55.9615 90.967 56.0115 cv
91.315 56.2035 li
91.224 56.3995 li
89.633 55.5215 li
89.725 55.3265 li
89.983 55.4685 li
90.093 55.5295 90.195 55.5425 90.297 55.3255 cv
91.293 53.1985 li
91.393 52.9855 91.325 52.8985 91.216 52.8385 cv
90.957 52.6955 li
91.046 52.5045 li
92.852 53.5015 li
93.322 53.7615 93.528 54.3005 93.321 54.7435 cv
93.175 55.0565 92.811 55.1785 92.418 55.1135 cv
92.624 55.4945 92.61 55.7445 92.31 56.3875 cv
92.222 56.5735 92.265 56.6515 92.339 56.6925 cv
92.414 56.7335 92.493 56.7115 92.552 56.5855 cv
92.838 55.9735 li
93.089 56.1125 li
92.784 56.7635 li
92.676 56.9935 92.422 57.1155 92.019 56.8925 cv
f
96.6533 55.2723 mo
96.5073 55.2173 96.4143 55.2613 96.2863 55.4383 cv
94.4093 57.8833 li
94.1063 57.7693 li
94.1623 54.6363 li
94.1573 54.3943 94.1303 54.3203 94.0143 54.2763 cv
93.7933 54.1933 li
93.8613 53.9883 li
95.4483 54.5873 li
95.3823 54.7923 li
95.1443 54.7033 li
95.0283 54.6593 94.8703 54.6573 94.8733 54.9043 cv
94.7943 56.9933 li
96.0253 55.3393 li
96.1363 55.1823 96.0963 55.0623 95.9343 55.0013 cv
95.7393 54.9273 li
95.8063 54.7223 li
96.8793 55.1263 li
96.8113 55.3323 li
cp
f
98.5361 59.0917 mo
98.6011 58.8807 li
98.8571 58.9307 li
99.0461 58.9627 99.1051 58.9137 99.1571 58.7137 cv
99.7491 56.7407 li
98.0331 58.9667 li
97.7231 58.8877 li
97.6501 56.2187 li
96.9531 58.1677 li
96.8801 58.4027 96.9681 58.4657 97.0881 58.4967 cv
97.3471 58.5627 li
97.2811 58.7747 li
96.0111 58.4487 li
96.0761 58.2377 li
96.3601 58.3097 li
96.4801 58.3407 96.5871 58.3277 96.6601 58.0917 cv
97.4611 55.8097 li
97.5321 55.5797 97.4461 55.5117 97.3251 55.4807 cv
97.0461 55.4087 li
97.1091 55.2017 li
98.3751 55.5267 li
98.3911 57.9727 li
99.9891 55.9037 li
101.217 56.1287 li
101.153 56.3357 li
100.867 56.2897 li
100.742 56.2577 100.635 56.2757 100.563 56.5067 cv
99.8701 58.8097 li
99.7981 59.0447 99.8811 59.1067 100.006 59.1387 cv
100.286 59.1967 li
100.221 59.4087 li
cp
f
139.547 59.1615 mo
138.571 59.3735 137.865 58.6005 137.657 57.7985 cv
137.425 56.9015 137.825 55.8815 138.69 55.6935 cv
139.07 55.6105 139.3 55.6815 139.594 55.8445 cv
139.633 55.4875 li
139.779 55.4555 li
140.153 56.8965 li
139.949 56.9415 li
139.705 56.2335 139.301 55.8475 138.786 55.9595 cv
138.304 56.0645 138.151 56.7235 138.388 57.6345 cv
138.611 58.4985 139.063 58.9745 139.559 58.8665 cv
140.086 58.7515 140.336 58.3945 140.218 57.6545 cv
140.453 57.6025 li
140.625 58.4825 140.282 59.0005 139.547 59.1615 cv
f
141.396 56.1122 mo
141.395 57.2642 li
142.049 57.0502 li
cp
142.215 58.3642 mo
142.152 58.1532 li
142.419 58.0662 li
142.542 58.0262 142.671 57.9332 142.529 57.7322 cv
142.201 57.2632 li
141.393 57.5272 li
141.391 58.1032 li
141.393 58.2982 141.497 58.3672 141.665 58.3122 cv
141.87 58.2452 li
141.934 58.4562 li
140.766 58.8372 li
140.701 58.6262 li
140.915 58.5562 li
141.066 58.5072 141.12 58.4182 141.122 58.1912 cv
141.152 55.0912 li
141.473 54.9872 li
143.249 57.4972 li
143.385 57.6952 143.454 57.7292 143.579 57.6882 cv
143.852 57.5992 li
143.917 57.8092 li
cp
f
145.384 53.6727 mo
145.238 53.7367 145.19 53.8387 145.189 54.0677 cv
145.186 57.2687 li
144.884 57.4017 li
143.071 55.0027 li
142.931 54.8197 142.868 54.7837 142.752 54.8347 cv
142.532 54.9317 li
142.47 54.7247 li
144.053 54.0257 li
144.115 54.2327 li
143.879 54.3367 li
143.763 54.3877 143.638 54.5017 143.78 54.6897 cv
144.946 56.2617 li
144.928 54.1827 li
144.927 53.9807 144.828 53.9177 144.667 53.9887 cv
144.472 54.0747 li
144.409 53.8687 li
145.478 53.3967 li
145.541 53.6027 li
cp
f
147.754 55.955 mo
147.34 56.205 147.082 56.151 146.858 55.998 cv
146.808 56.443 li
146.684 56.518 li
146.27 55.125 li
146.432 55.027 li
146.701 55.639 147.08 56.069 147.653 55.723 cv
147.882 55.585 148.04 55.289 147.957 55.008 cv
147.672 54.052 146.353 55.573 145.918 54.114 cv
145.827 53.809 145.874 53.078 146.514 52.693 cv
146.866 52.48 147.108 52.511 147.324 52.623 cv
147.342 52.192 li
147.462 52.12 li
147.855 53.438 li
147.684 53.54 li
147.43 52.886 147.103 52.63 146.634 52.913 cv
146.289 53.121 146.257 53.473 146.318 53.679 cv
146.553 54.467 147.958 53.126 148.339 54.407 cv
148.499 54.941 148.319 55.614 147.754 55.955 cv
f
149.061 52.1747 mo
149.149 53.3927 li
149.681 52.9567 li
cp
149.923 54.2917 mo
149.854 54.0897 li
150.071 53.9107 li
150.169 53.8297 150.27 53.6897 150.135 53.5237 cv
149.824 53.1337 li
149.169 53.6707 li
149.213 54.2797 li
149.23 54.4857 149.321 54.5257 149.458 54.4127 cv
149.624 54.2777 li
149.694 54.4787 li
148.747 55.2557 li
148.677 55.0537 li
148.849 54.9127 li
148.972 54.8107 149.011 54.6997 148.995 54.4587 cv
148.777 51.1747 li
149.038 50.9607 li
150.72 53.0447 li
150.85 53.2097 150.91 53.2237 151.011 53.1397 cv
151.233 52.9587 li
151.303 53.1597 li
cp
f
152.242 52.1195 mo
151.95 52.5015 151.739 52.5195 151.541 52.4255 cv
151.564 52.9065 li
151.476 53.0195 li
150.956 51.6825 li
151.07 51.5325 li
151.367 52.0945 151.726 52.4345 152.13 51.9055 cv
152.29 51.6945 152.374 51.3395 152.268 51.0695 cv
151.911 50.1505 151.084 52.1275 150.538 50.7255 cv
150.424 50.4335 150.359 49.6545 150.808 49.0645 cv
151.056 48.7395 151.252 48.7015 151.438 48.7565 cv
151.392 48.3005 li
151.476 48.1895 li
151.97 49.4545 li
151.849 49.6125 li
151.558 49.0005 151.263 48.8285 150.934 49.2605 cv
150.692 49.5785 150.716 49.9555 150.793 50.1535 cv
151.088 50.9115 152.008 49.0985 152.486 50.3285 cv
152.686 50.8415 152.639 51.5975 152.242 52.1195 cv
f
119.068 65.264 mo
114.547 65.264 110.988 64.101 108.692 63.1 cv
109.163 62.265 109.512 61.392 109.776 60.475 cv
112.713 62.31 115.854 63.876 119.085 65.249 cv
122.322 63.873 125.469 62.303 128.412 60.463 cv
128.703 61.376 129.081 62.245 129.552 63.081 cv
127.256 64.082 123.589 65.264 119.068 65.264 cv
154.47 48.682 mo
153.887 48.061 152.823 46.656 152.245 44.216 cv
152.122 43.433 151.542 42.7 150.208 42.7 cv
148.603 42.7 147.209 43.612 146.438 44.466 cv
145.808 45.163 145.484 45.928 145.549 46.565 cv
145.568 46.742 145.631 46.895 145.732 47.022 cv
145.729 47.025 li
148.004 49.753 li
144.46 52.574 140.098 53.897 136.085 54.488 cv
142.598 48.091 146.919 39.308 146.919 26.751 cv
146.917 3.46899 li
140.12 1.742 129.213 0 119.085 0 cv
108.956 0 98.0484 1.742 91.2514 3.46899 cv
91.2504 26.751 li
91.2504 39.24 95.5254 47.994 101.978 54.383 cv
97.9944 53.835 93.6714 52.569 90.1334 49.753 cv
92.4084 47.025 li
92.4054 47.022 li
92.5054 46.895 92.5694 46.742 92.5874 46.565 cv
92.6524 45.928 92.3294 45.163 91.6994 44.466 cv
90.9284 43.612 89.5334 42.7 87.9294 42.7 cv
86.5954 42.7 86.0144 43.433 85.8924 44.216 cv
85.3144 46.656 84.2504 48.061 83.6664 48.682 cv
82.3644 50.068 83.1124 51.45 83.7884 52.368 cv
85.7134 54.986 90.5374 59.579 101.255 61.07 cv
100.962 61.98 100.605 62.795 100.249 63.571 cv
99.8484 64.441 100.177 65.224 101.384 66.275 cv
104.376 68.878 110.591 71.738 119.068 71.738 cv
127.546 71.738 133.761 68.878 136.752 66.275 cv
137.959 65.224 138.289 64.441 137.888 63.571 cv
137.531 62.795 137.175 61.98 136.882 61.07 cv
147.599 59.579 152.574 55.175 154.464 52.29 cv
155.089 51.336 155.772 50.068 154.47 48.682 cv
f
103.47 57.2245 mo
102.75 57.2245 102.533 57.4555 102.533 57.8705 cv
102.533 59.6595 106.002 61.9405 108.114 62.8705 cv
108.604 62.0085 108.991 61.1105 109.282 60.1615 cv
108.025 59.3575 106.808 58.5025 105.638 57.5915 cv
104.843 57.3885 104.077 57.2245 103.47 57.2245 cv
0 0 0 0 cmyk
f
88.8076 45.931 mo
88.5436 46.354 88.0086 47.214 87.8476 47.472 cv
88.2426 48.001 89.0066 48.802 89.7376 49.426 cv
91.4206 47.406 li
90.5756 47.397 89.4896 46.868 88.8076 45.931 cv
f
88.8149 44.9486 mo
89.4949 46.1306 90.5939 46.9796 91.6209 46.7686 cv
91.9759 46.6956 91.9979 46.4816 92.0039 46.4106 cv
92.0549 45.9186 91.8509 45.3996 91.3179 44.8096 cv
90.4419 43.8406 89.2129 43.2466 88.0299 43.2466 cv
86.8349 43.2466 86.4809 43.9246 86.4809 44.5786 cv
86.4809 45.0066 86.7169 45.9006 87.5179 47.0296 cv
87.8259 46.5356 88.8149 44.9486 88.8149 44.9486 cv
f
86.0674 45.4701 mo
85.4404 47.3391 84.7404 48.4621 84.2194 49.0151 cv
83.4064 49.8811 83.3664 50.8011 84.2924 52.0601 cv
86.1734 54.6181 90.8374 59.0271 101.423 60.4801 cv
101.655 59.6601 101.814 58.8561 101.893 57.8421 cv
101.894 57.8421 li
101.903 57.0431 102.502 56.7011 103.333 56.7011 cv
103.726 56.7011 104.219 56.7751 104.756 56.8861 cv
104.055 56.3101 103.373 55.7121 102.711 55.0911 cv
92.6174 53.7771 87.4804 49.0221 86.0674 45.4701 cv
f
130.146 62.8085 mo
132.258 61.8795 135.57 59.6685 135.57 57.8805 cv
135.57 57.4655 135.354 57.2345 134.633 57.2345 cv
134.044 57.2345 133.309 57.3875 132.544 57.5805 cv
131.376 58.4925 130.158 59.3485 128.9 60.1535 cv
129.227 61.0795 129.658 61.9505 130.146 62.8085 cv
f
146.716 47.4061 mo
148.4 49.4261 li
149.131 48.8021 149.895 48.0011 150.29 47.4721 cv
150.129 47.2141 149.594 46.3541 149.33 45.9311 cv
148.649 46.8681 147.562 47.3971 146.716 47.4061 cv
f
146.061 46.5131 mo
146.068 46.5831 146.09 46.7971 146.445 46.8701 cv
147.471 47.0811 148.643 46.1301 149.322 44.9491 cv
149.322 44.9491 150.312 46.5351 150.62 47.0301 cv
151.421 45.9011 151.65 44.9381 151.65 44.5111 cv
151.65 43.8561 151.342 43.2641 150.146 43.2641 cv
148.964 43.2641 147.695 43.8401 146.82 44.8091 cv
146.288 45.3991 146.01 46.0201 146.061 46.5131 cv
f
153.991 49.1449 mo
153.47 48.5909 152.698 47.3389 152.071 45.4699 cv
150.659 49.0179 145.533 53.7659 135.463 55.0859 cv
134.803 55.7069 134.122 56.3019 133.423 56.8769 cv
133.944 56.7719 134.422 56.7009 134.805 56.7009 cv
135.636 56.7009 136.235 57.0429 136.243 57.8419 cv
136.324 58.8559 136.5 59.7529 136.733 60.5729 cv
147.319 59.1199 152.139 54.6769 153.829 52.1749 cv
154.704 50.8799 154.804 50.0099 153.991 49.1449 cv
f
135.874 59.0707 mo
134.179 61.9507 127.062 65.8677 119.068 65.8677 cv
111.075 65.8677 103.959 61.9507 102.264 59.0707 cv
101.96 60.9557 101.458 62.5067 100.834 63.8627 cv
100.64 64.2857 100.541 64.8327 101.841 65.9647 cv
104.762 68.5067 110.733 71.1457 119.068 71.1457 cv
127.404 71.1457 133.378 68.5247 136.299 65.9827 cv
137.599 64.8507 137.5 64.3037 137.306 63.8807 cv
136.682 62.5247 136.177 60.9557 135.874 59.0707 cv
f
119.085 63.4369 mo
104.68 57.4209 92.403 47.1569 92.403 26.2569 cv
92.403 4.4859 li
97.893 3.04688 109.83 1.02188 119.085 1.02188 cv
128.339 1.02188 140.276 3.04688 145.766 4.4859 cv
145.766 26.2569 li
145.766 47.1569 133.489 57.4209 119.085 63.4369 cv
1 0 0 0 cmyk
f
103.03 65.493 mo
102.252 64.865 102.031 63.691 102.177 62.9 cv
102.342 62.015 103.008 61.55 103.697 62.106 cv
104.002 62.351 104.14 62.593 104.292 62.958 cv
104.451 62.714 li
104.568 62.808 li
104.234 64.17 li
104.071 64.038 li
104.157 63.291 104.08 62.722 103.669 62.391 cv
103.283 62.08 102.93 62.467 102.762 63.366 cv
102.604 64.218 102.752 64.954 103.148 65.274 cv
103.57 65.614 103.881 65.54 104.07 64.869 cv
104.258 65.021 li
104.067 65.797 103.532 65.897 103.03 65.493 cv
1 1 .2 0 cmyk
f
106.5 64.1454 mo
106.101 63.9614 105.674 64.1884 105.458 65.2604 cv
105.23 66.3924 105.594 66.8214 105.931 66.9754 cv
106.423 67.2014 106.762 66.7694 106.923 65.9684 cv
107.126 64.9594 106.916 64.3354 106.5 64.1454 cv
105.838 67.2094 mo
104.9 66.7794 104.618 65.6894 104.768 64.9484 cv
104.928 64.1524 105.617 63.4634 106.513 63.8744 cv
107.589 64.3684 107.765 65.5294 107.63 66.1974 cv
107.457 67.0574 106.779 67.6414 105.838 67.2094 cv
f
111.073 67.6664 mo
110.949 67.6224 110.844 67.6304 110.795 67.8644 cv
110.535 69.0254 li
110.341 68.9794 li
110.201 68.5254 li
110.031 68.7724 109.695 68.8804 109.24 68.7194 cv
108.373 68.4124 107.952 67.4934 108.146 66.5614 cv
108.332 65.6704 109.103 65.0214 109.996 65.3374 cv
110.398 65.4804 110.625 65.7164 110.765 65.9724 cv
110.973 65.6844 li
111.121 65.7244 li
110.788 67.0764 li
110.6 67.0254 li
110.668 66.3844 110.552 65.8164 110.004 65.6224 cv
109.733 65.5274 109.116 65.5954 108.864 66.8094 cv
108.669 67.7474 108.967 68.3204 109.418 68.4794 cv
109.776 68.6064 109.935 68.4574 110.041 68.2474 cv
110.162 67.7374 li
110.211 67.5034 110.123 67.4264 109.999 67.3824 cv
109.707 67.2794 li
109.75 67.0734 li
111.298 67.5234 li
111.255 67.7304 li
cp
f
114.97 66.7948 mo
114.837 66.7718 114.737 66.7988 114.717 67.0388 cv
114.322 69.9408 li
113.953 69.8768 li
112.564 67.1148 li
112.249 69.0398 li
112.219 69.2678 112.316 69.3728 112.449 69.3958 cv
112.754 69.4698 li
112.72 69.6868 li
111.394 69.3828 li
111.428 69.1668 li
111.689 69.2228 li
111.823 69.2458 111.9 69.2068 111.943 68.9668 cv
112.328 66.6208 li
112.364 66.3908 112.274 66.3228 112.121 66.2968 cv
111.86 66.2398 li
111.896 66.0338 li
112.912 66.2378 li
114.198 68.7948 li
114.4 66.9838 li
114.419 66.7438 114.322 66.6828 114.189 66.6598 cv
113.885 66.6078 li
113.918 66.3978 li
115.263 66.6278 li
115.232 66.8398 li
cp
f
117.153 66.9608 mo
116.711 66.9268 116.293 67.3128 116.205 68.4608 cv
116.111 69.6738 116.548 69.9638 116.92 69.9928 cv
117.464 70.0338 117.763 69.4768 117.83 68.6188 cv
117.913 67.5388 117.613 66.9958 117.153 66.9608 cv
116.852 70.2608 mo
115.815 70.1818 115.381 69.2018 115.442 68.4078 cv
115.507 67.5548 116.141 66.6108 117.132 66.6868 cv
118.322 66.7768 118.654 67.8688 118.599 68.5838 cv
118.528 69.5048 117.893 70.3398 116.852 70.2608 cv
f
120.651 70.2831 mo
120.15 70.3031 119.904 70.1261 119.724 69.8771 cv
119.533 70.2541 li
119.383 70.2601 li
119.399 68.7961 li
119.595 68.7881 li
119.677 69.4751 119.928 70.0511 120.621 70.0231 cv
120.897 70.0121 121.151 69.8251 121.154 69.5291 cv
121.165 68.5231 119.342 69.2411 119.358 67.7091 cv
119.362 67.3881 119.639 66.7521 120.412 66.7201 cv
120.838 66.7031 121.075 66.8511 121.259 67.0611 cv
121.413 66.6801 li
121.558 66.6751 li
121.544 68.0591 li
121.338 68.0681 li
121.284 67.3511 121.031 66.9571 120.465 66.9801 cv
120.048 66.9961 119.905 67.2981 119.903 67.5141 cv
119.894 68.3431 121.747 67.8291 121.733 69.1751 cv
121.727 69.7371 121.334 70.2561 120.651 70.2831 cv
f
124.179 69.9349 mo
123.148 70.0889 122.573 69.3039 122.521 68.4819 cv
122.462 67.5619 123.037 66.5029 123.934 66.3909 cv
124.335 66.3399 124.575 66.3899 124.838 66.5649 cv
124.946 66.2059 li
125.098 66.1779 li
125.192 67.6549 li
124.979 67.6929 li
124.872 66.9649 124.543 66.5589 124.007 66.6539 cv
123.503 66.7439 123.223 67.4079 123.283 68.3409 cv
123.338 69.2269 123.698 69.7269 124.215 69.6339 cv
124.764 69.5359 125.083 69.1829 125.11 68.4259 cv
125.355 68.3819 li
125.356 69.2819 124.95 69.8189 124.179 69.9349 cv
f
127.188 66.0331 mo
127.076 66.0651 127.007 66.1301 127.02 66.3161 cv
127.086 67.3411 li
127.176 67.3151 li
127.677 67.1711 127.739 67.1331 127.754 66.3261 cv
127.938 66.2731 li
128.062 68.1481 li
127.878 68.2001 li
127.759 67.4321 127.717 67.4291 127.193 67.5791 cv
127.104 67.6051 li
127.18 68.7771 li
127.192 68.9721 127.274 68.9701 127.378 68.9441 cv
127.595 68.8901 127.726 68.8551 128.032 68.7561 cv
128.528 68.6141 128.631 68.3741 128.655 67.4581 cv
128.848 67.4031 li
128.983 68.7111 li
127.89 69.0661 127.063 69.2951 125.974 69.5711 cv
125.959 69.3501 li
126.254 69.2751 li
126.379 69.2391 126.476 69.1621 126.459 68.9171 cv
126.301 66.5191 li
126.285 66.2791 126.184 66.2631 126.059 66.3001 cv
125.763 66.3851 li
125.748 66.1691 li
126.811 65.8831 127.824 65.5941 128.558 65.3671 cv
128.692 66.6401 li
128.499 66.6951 li
128.359 65.8181 128.095 65.7571 127.688 65.8751 cv
127.487 65.9331 127.304 66.0001 127.188 66.0331 cv
f
130.847 64.6888 mo
130.61 64.7968 li
130.508 64.8438 130.483 64.8948 130.498 65.0088 cv
130.64 66.1058 li
130.971 65.9558 li
131.484 65.7218 131.607 65.2798 131.573 65.0198 cv
131.503 64.4848 131.122 64.5638 130.847 64.6888 cv
129.701 68.4328 mo
129.672 68.2188 li
129.975 68.1048 li
130.093 68.0508 130.159 67.9578 130.129 67.7208 cv
129.839 65.4398 li
129.809 65.2088 129.71 65.2088 129.592 65.2618 cv
129.306 65.3768 li
129.279 65.1678 li
131.234 64.2768 li
131.743 64.0448 132.185 64.2348 132.247 64.7168 cv
132.291 65.0578 132.103 65.5218 131.717 65.7558 cv
132.078 65.8368 132.197 66.0188 132.287 66.7188 cv
132.314 66.9218 132.416 66.9358 132.498 66.8908 cv
132.576 66.8478 132.631 66.7648 132.614 66.6278 cv
132.496 65.9768 li
132.712 65.8818 li
132.848 66.5608 li
132.88 66.8118 132.752 67.1188 132.316 67.3168 cv
131.976 67.4718 131.645 67.4128 131.591 66.9958 cv
131.499 66.2908 131.353 66.0918 130.964 66.2138 cv
130.672 66.3478 li
130.82 67.5218 li
130.845 67.7118 130.917 67.7188 131.015 67.6738 cv
131.4 67.5168 li
131.427 67.7298 li
130.886 67.9818 130.27 68.2288 129.701 68.4328 cv
f
135.142 61.7494 mo
135.457 62.8764 li
135.298 62.9984 li
135.094 62.1974 134.849 62.2594 134.516 62.5224 cv
134.343 62.6584 134.24 62.7444 134.09 62.8644 cv
133.997 62.9354 133.946 63.0224 133.974 63.1984 cv
134.185 64.1594 li
134.29 64.0804 li
134.652 63.7994 134.702 63.7244 134.58 62.9634 cv
134.732 62.8474 li
135.127 64.5744 li
134.976 64.6904 li
134.799 63.9874 134.764 63.9994 134.33 64.3304 cv
134.225 64.4094 li
134.446 65.5184 li
134.476 65.7034 134.54 65.6664 134.632 65.6094 cv
134.769 65.5254 135.09 65.2694 135.231 65.1564 cv
135.564 64.9014 135.635 64.6014 135.509 63.7314 cv
135.668 63.6094 li
135.984 64.8044 li
135.341 65.4184 134.323 66.1414 133.48 66.6934 cv
133.447 66.4844 li
133.702 66.3174 li
133.837 66.2144 133.873 66.1374 133.833 65.8874 cv
133.387 63.6744 li
133.351 63.4474 133.249 63.4194 133.146 63.4994 cv
132.88 63.6804 li
132.828 63.4864 li
133.471 63.0404 134.427 62.3164 135.142 61.7494 cv
f
86.9048 49.2552 mo
86.7658 49.0792 li
86.6998 48.9952 86.6648 49.0032 86.6188 49.0992 cv
86.1378 50.0002 li
86.3688 50.2802 li
86.7038 50.7042 86.9638 50.5362 87.0698 50.3162 cv
87.2878 49.8632 87.0838 49.4832 86.9048 49.2552 cv
86.3258 52.7692 mo
86.1058 52.4882 85.9878 52.0682 86.1568 51.7162 cv
86.4458 51.1192 86.4578 50.8052 86.2308 50.4462 cv
86.0398 50.2052 li
85.5308 51.1202 li
85.4538 51.2812 85.4938 51.3632 85.5578 51.4442 cv
85.8038 51.7562 li
85.7168 51.9362 li
84.5938 50.5152 li
84.6808 50.3352 li
84.8638 50.5662 li
84.9418 50.6642 85.0178 50.7092 85.1138 50.5082 cv
86.1318 48.6312 li
86.2268 48.4352 86.1828 48.3212 86.1058 48.2242 cv
85.9228 47.9932 li
86.0078 47.8172 li
87.2668 49.4102 li
87.5978 49.8302 87.7048 50.4672 87.5078 50.8762 cv
87.3678 51.1642 87.0828 51.1842 86.7908 50.9952 cv
86.9118 51.4642 86.8788 51.7262 86.5928 52.3182 cv
86.5098 52.4912 86.5338 52.5872 86.5868 52.6532 cv
86.6398 52.7202 86.7008 52.7212 86.7578 52.6052 cv
87.0298 52.0402 li
87.2068 52.2642 li
86.9168 52.8642 li
86.8148 53.0772 86.6118 53.1292 86.3258 52.7692 cv
f
86.9048 53.37 mo
87.0038 53.183 li
87.2278 53.368 li
87.3228 53.447 87.4148 53.475 87.5258 53.267 cv
88.6078 51.229 li
88.7158 51.025 88.6608 50.926 88.5668 50.847 cv
88.3428 50.662 li
88.4398 50.479 li
90.6028 52.27 li
90.0188 53.369 li
89.8738 53.248 li
90.2188 52.432 90.0988 52.135 89.7898 51.879 cv
89.4108 51.564 li
89.3258 51.494 89.2518 51.487 89.1678 51.645 cv
88.6858 52.552 li
88.7538 52.608 li
89.1338 52.922 89.1898 52.945 89.5958 52.317 cv
89.7358 52.432 li
88.8898 54.026 li
88.7508 53.911 li
89.0548 53.199 89.0308 53.162 88.6348 52.832 cv
88.5668 52.777 li
88.0458 53.758 li
87.9568 53.925 88.0068 53.996 88.0848 54.06 cv
88.5798 54.471 li
88.8848 54.724 89.1398 54.676 89.5938 53.987 cv
89.7388 54.107 li
89.1448 55.226 li
cp
f
92.373 53.4935 mo
92.154 53.3725 li
92.06 53.3205 92.016 53.3405 91.967 53.4445 cv
91.495 54.4515 li
91.801 54.6195 li
92.275 54.8815 92.588 54.6345 92.7 54.3955 cv
92.93 53.9045 92.627 53.6345 92.373 53.4935 cv
92.019 56.8925 mo
91.705 56.7195 91.508 56.3815 91.687 55.9995 cv
91.99 55.3525 91.992 55.0645 91.662 54.8225 cv
91.392 54.6725 li
90.897 55.7275 li
90.816 55.9015 90.877 55.9615 90.967 56.0115 cv
91.315 56.2035 li
91.224 56.3995 li
89.633 55.5215 li
89.725 55.3265 li
89.983 55.4685 li
90.093 55.5295 90.195 55.5425 90.297 55.3255 cv
91.293 53.1985 li
91.393 52.9855 91.325 52.8985 91.216 52.8385 cv
90.957 52.6955 li
91.046 52.5045 li
92.852 53.5015 li
93.322 53.7615 93.528 54.3005 93.321 54.7435 cv
93.175 55.0565 92.811 55.1785 92.418 55.1135 cv
92.624 55.4945 92.61 55.7445 92.31 56.3875 cv
92.222 56.5735 92.265 56.6515 92.339 56.6925 cv
92.414 56.7335 92.493 56.7115 92.552 56.5855 cv
92.838 55.9735 li
93.089 56.1125 li
92.784 56.7635 li
92.676 56.9935 92.422 57.1155 92.019 56.8925 cv
f
96.6533 55.2723 mo
96.5073 55.2173 96.4143 55.2613 96.2863 55.4383 cv
94.4093 57.8833 li
94.1063 57.7693 li
94.1623 54.6363 li
94.1573 54.3943 94.1303 54.3203 94.0143 54.2763 cv
93.7933 54.1933 li
93.8613 53.9883 li
95.4483 54.5873 li
95.3823 54.7923 li
95.1443 54.7033 li
95.0283 54.6593 94.8703 54.6573 94.8733 54.9043 cv
94.7943 56.9933 li
96.0253 55.3393 li
96.1363 55.1823 96.0963 55.0623 95.9343 55.0013 cv
95.7393 54.9273 li
95.8063 54.7223 li
96.8793 55.1263 li
96.8113 55.3323 li
cp
f
98.5361 59.0917 mo
98.6011 58.8807 li
98.8571 58.9307 li
99.0461 58.9627 99.1051 58.9137 99.1571 58.7137 cv
99.7491 56.7407 li
98.0331 58.9667 li
97.7231 58.8877 li
97.6501 56.2187 li
96.9531 58.1677 li
96.8801 58.4027 96.9681 58.4657 97.0881 58.4967 cv
97.3471 58.5627 li
97.2811 58.7747 li
96.0111 58.4487 li
96.0761 58.2377 li
96.3601 58.3097 li
96.4801 58.3407 96.5871 58.3277 96.6601 58.0917 cv
97.4611 55.8097 li
97.5321 55.5797 97.4461 55.5117 97.3251 55.4807 cv
97.0461 55.4087 li
97.1091 55.2017 li
98.3751 55.5267 li
98.3911 57.9727 li
99.9891 55.9037 li
101.217 56.1287 li
101.153 56.3357 li
100.867 56.2897 li
100.742 56.2577 100.635 56.2757 100.563 56.5067 cv
99.8701 58.8097 li
99.7981 59.0447 99.8811 59.1067 100.006 59.1387 cv
100.286 59.1967 li
100.221 59.4087 li
cp
f
139.547 59.1615 mo
138.571 59.3735 137.865 58.6005 137.657 57.7985 cv
137.425 56.9015 137.825 55.8815 138.69 55.6935 cv
139.07 55.6105 139.3 55.6815 139.594 55.8445 cv
139.633 55.4875 li
139.779 55.4555 li
140.153 56.8965 li
139.949 56.9415 li
139.705 56.2335 139.301 55.8475 138.786 55.9595 cv
138.304 56.0645 138.151 56.7235 138.388 57.6345 cv
138.611 58.4985 139.063 58.9745 139.559 58.8665 cv
140.086 58.7515 140.336 58.3945 140.218 57.6545 cv
140.453 57.6025 li
140.625 58.4825 140.282 59.0005 139.547 59.1615 cv
f
141.396 56.1122 mo
141.395 57.2642 li
142.049 57.0502 li
cp
142.215 58.3642 mo
142.152 58.1532 li
142.419 58.0662 li
142.542 58.0262 142.671 57.9332 142.529 57.7322 cv
142.201 57.2632 li
141.393 57.5272 li
141.391 58.1032 li
141.393 58.2982 141.497 58.3672 141.665 58.3122 cv
141.87 58.2452 li
141.934 58.4562 li
140.766 58.8372 li
140.701 58.6262 li
140.915 58.5562 li
141.066 58.5072 141.12 58.4182 141.122 58.1912 cv
141.152 55.0912 li
141.473 54.9872 li
143.249 57.4972 li
143.385 57.6952 143.454 57.7292 143.579 57.6882 cv
143.852 57.5992 li
143.917 57.8092 li
cp
f
145.384 53.6727 mo
145.238 53.7367 145.19 53.8387 145.189 54.0677 cv
145.186 57.2687 li
144.884 57.4017 li
143.071 55.0027 li
142.931 54.8197 142.868 54.7837 142.752 54.8347 cv
142.532 54.9317 li
142.47 54.7247 li
144.053 54.0257 li
144.115 54.2327 li
143.879 54.3367 li
143.763 54.3877 143.638 54.5017 143.78 54.6897 cv
144.946 56.2617 li
144.928 54.1827 li
144.927 53.9807 144.828 53.9177 144.667 53.9887 cv
144.472 54.0747 li
144.409 53.8687 li
145.478 53.3967 li
145.541 53.6027 li
cp
f
147.754 55.955 mo
147.34 56.205 147.082 56.151 146.858 55.998 cv
146.808 56.443 li
146.684 56.518 li
146.27 55.125 li
146.432 55.027 li
146.701 55.639 147.08 56.069 147.653 55.723 cv
147.882 55.585 148.04 55.289 147.957 55.008 cv
147.672 54.052 146.353 55.573 145.918 54.114 cv
145.827 53.809 145.874 53.078 146.514 52.693 cv
146.866 52.48 147.108 52.511 147.324 52.623 cv
147.342 52.192 li
147.462 52.12 li
147.855 53.438 li
147.684 53.54 li
147.43 52.886 147.103 52.63 146.634 52.913 cv
146.289 53.121 146.257 53.473 146.318 53.679 cv
146.553 54.467 147.958 53.126 148.339 54.407 cv
148.499 54.941 148.319 55.614 147.754 55.955 cv
f
149.061 52.1747 mo
149.149 53.3927 li
149.681 52.9567 li
cp
149.923 54.2917 mo
149.854 54.0897 li
150.071 53.9107 li
150.169 53.8297 150.27 53.6897 150.135 53.5237 cv
149.824 53.1337 li
149.169 53.6707 li
149.213 54.2797 li
149.23 54.4857 149.321 54.5257 149.458 54.4127 cv
149.624 54.2777 li
149.694 54.4787 li
148.747 55.2557 li
148.677 55.0537 li
148.849 54.9127 li
148.972 54.8107 149.011 54.6997 148.995 54.4587 cv
148.777 51.1747 li
149.038 50.9607 li
150.72 53.0447 li
150.85 53.2097 150.91 53.2237 151.011 53.1397 cv
151.233 52.9587 li
151.303 53.1597 li
cp
f
152.242 52.1195 mo
151.95 52.5015 151.739 52.5195 151.541 52.4255 cv
151.564 52.9065 li
151.476 53.0195 li
150.956 51.6825 li
151.07 51.5325 li
151.367 52.0945 151.726 52.4345 152.13 51.9055 cv
152.29 51.6945 152.374 51.3395 152.268 51.0695 cv
151.911 50.1505 151.084 52.1275 150.538 50.7255 cv
150.424 50.4335 150.359 49.6545 150.808 49.0645 cv
151.056 48.7395 151.252 48.7015 151.438 48.7565 cv
151.392 48.3005 li
151.476 48.1895 li
151.97 49.4545 li
151.849 49.6125 li
151.558 49.0005 151.263 48.8285 150.934 49.2605 cv
150.692 49.5785 150.716 49.9555 150.793 50.1535 cv
151.088 50.9115 152.008 49.0985 152.486 50.3285 cv
152.686 50.8415 152.639 51.5975 152.242 52.1195 cv
f
99.9668 13.6259 mo
100.364 13.0729 li
137.014 36.2799 li
137.416 36.5349 137.878 36.8409 138.345 37.1609 cv
138.529 36.9079 li
138.702 36.7299 138.845 36.5799 138.942 36.4909 cv
139.123 36.5579 139.779 36.8729 140.144 37.1039 cv
140.995 37.6429 141.766 38.7969 141.626 39.5699 cv
140.914 39.9829 139.486 39.7439 138.634 39.2049 cv
138.269 38.9739 137.712 38.5219 137.579 38.3879 cv
137.628 38.2749 137.843 37.8929 137.965 37.6869 cv
105.258 16.9759 li
104.293 16.9969 103.3 17.1169 102.308 16.4999 cv
101.927 16.2629 100.625 15.4309 99.8718 14.9189 cv
100.038 14.8249 100.547 14.5249 100.951 14.2489 cv
cp
f
100.117 13.434 mo
101.153 14.09 li
100.748 14.367 100.252 14.677 100.085 14.771 cv
100.838 15.283 102.073 16.073 102.454 16.309 cv
103.448 16.927 104.442 16.806 105.409 16.786 cv
136.728 36.617 li
137.787 37.288 139.346 38.183 140.377 38.69 cv
140.346 38.732 li
139.459 38.601 138.635 38.155 137.951 37.722 cv
137.823 37.929 137.728 38.11 137.677 38.227 cv
137.81 38.361 138.367 38.813 138.731 39.044 cv
139.584 39.583 140.963 39.79 141.674 39.378 cv
141.814 38.605 141.093 37.482 140.241 36.943 cv
139.877 36.712 139.221 36.396 139.04 36.33 cv
138.947 36.415 138.646 36.756 138.507 36.939 cv
105.798 16.227 li
105.458 15.381 105.204 14.476 104.224 13.844 cv
103.848 13.602 102.606 12.822 101.818 12.359 cv
101.788 12.538 101.668 13.081 101.548 13.537 cv
100.513 12.882 li
cp
0 0 0 0 cmyk
f
102.129 14.0311 mo
102.178 13.6951 102.188 13.1431 102.188 13.0101 cv
102.188 12.9211 102.308 12.9971 102.319 13.0461 cv
102.374 13.2771 102.377 13.8171 102.417 14.2121 cv
cp
1 1 .2 0 cmyk
f
103.063 14.6215 mo
103.054 14.2755 103.011 13.7825 102.967 13.4765 cv
102.951 13.3625 103.093 13.4635 103.116 13.5155 cv
103.256 13.8475 103.332 14.5935 103.356 14.8075 cv
cp
f
104.958 15.8221 mo
104.9 15.4831 104.813 15.0511 104.748 14.8811 cv
104.662 14.6561 104.818 14.7801 104.863 14.8641 cv
105.03 15.1691 105.174 15.6621 105.232 15.9961 cv
cp
f
104.024 15.2308 mo
104.015 14.8848 103.903 14.3208 103.845 14.0328 cv
103.822 13.9198 103.98 14.0258 104.003 14.0778 cv
104.147 14.4028 104.303 15.2088 104.328 15.4218 cv
cp
f
101.854 14.4144 mo
101.54 14.5824 100.998 14.7974 100.868 14.8484 cv
100.78 14.8814 100.899 14.9574 100.952 14.9494 cv
101.201 14.9104 101.736 14.7104 102.14 14.5974 cv
cp
f
102.787 15.0067 mo
102.442 15.1287 101.938 15.2767 101.62 15.3517 cv
101.501 15.3807 101.654 15.4667 101.714 15.4667 cv
102.095 15.4647 102.859 15.2507 103.08 15.1927 cv
cp
f
104.683 16.2064 mo
104.326 16.2824 103.867 16.3694 103.674 16.3764 cv
103.42 16.3854 103.601 16.4754 103.701 16.4824 cv
104.064 16.5134 104.605 16.4544 104.956 16.3794 cv
cp
f
103.748 15.6151 mo
103.403 15.7371 102.804 15.8501 102.498 15.9081 cv
102.378 15.9301 102.542 16.0281 102.602 16.0291 cv
102.977 16.0321 103.831 15.8661 104.051 15.8071 cv
cp
f
97.8662 16.8695 mo
98.2632 16.3175 li
134.913 39.5235 li
135.315 39.7785 135.777 40.0845 136.244 40.4045 cv
136.428 40.1515 li
136.601 39.9735 136.744 39.8235 136.841 39.7345 cv
137.022 39.8015 137.678 40.1165 138.043 40.3475 cv
138.894 40.8865 139.665 42.0405 139.525 42.8145 cv
138.813 43.2265 137.385 42.9875 136.533 42.4485 cv
136.168 42.2175 135.611 41.7655 135.478 41.6325 cv
135.527 41.5185 135.742 41.1365 135.865 40.9305 cv
103.157 20.2195 li
102.192 20.2405 101.199 20.3605 100.207 19.7435 cv
99.8262 19.5065 98.5242 18.6755 97.7712 18.1625 cv
97.9372 18.0685 98.4462 17.7685 98.8502 17.4925 cv
cp
f
98.0166 16.6781 mo
99.0526 17.3341 li
98.6476 17.6101 98.1516 17.9201 97.9846 18.0151 cv
98.7376 18.5271 99.9726 19.3161 100.354 19.5531 cv
101.348 20.1711 102.342 20.0501 103.309 20.0291 cv
134.628 39.8611 li
135.687 40.5311 137.246 41.4261 138.277 41.9331 cv
138.246 41.9761 li
137.359 41.8451 136.536 41.3991 135.851 40.9661 cv
135.723 41.1731 135.628 41.3541 135.577 41.4711 cv
135.71 41.6051 136.267 42.0571 136.632 42.2881 cv
137.484 42.8271 138.863 43.0341 139.574 42.6221 cv
139.714 41.8481 138.993 40.7261 138.141 40.1861 cv
137.777 39.9551 137.121 39.6401 136.94 39.5741 cv
136.847 39.6591 136.546 40.0001 136.407 40.1831 cv
103.698 19.4711 li
103.358 18.6251 103.104 17.7191 102.124 17.0881 cv
101.748 16.8451 100.506 16.0661 99.7176 15.6021 cv
99.6876 15.7821 99.5676 16.3251 99.4476 16.7801 cv
98.4126 16.1251 li
cp
0 0 0 0 cmyk
f
100.028 17.2748 mo
100.077 16.9388 100.087 16.3868 100.087 16.2538 cv
100.087 16.1648 100.207 16.2408 100.218 16.2898 cv
100.273 16.5208 100.276 17.0608 100.316 17.4558 cv
cp
1 1 .2 0 cmyk
f
100.963 17.8656 mo
100.954 17.5196 100.911 17.0256 100.867 16.7206 cv
100.851 16.6066 100.993 16.7076 101.015 16.7596 cv
101.155 17.0916 101.232 17.8376 101.256 18.0516 cv
cp
f
102.857 19.0663 mo
102.799 18.7273 102.712 18.2943 102.647 18.1253 cv
102.561 17.9003 102.717 18.0243 102.762 18.1073 cv
102.929 18.4123 103.073 18.9053 103.131 19.2393 cv
cp
f
101.924 18.4745 mo
101.915 18.1285 101.803 17.5645 101.745 17.2765 cv
101.722 17.1635 101.88 17.2695 101.903 17.3215 cv
102.047 17.6465 102.203 18.4525 102.228 18.6665 cv
cp
f
99.7529 17.6586 mo
99.4399 17.8266 98.8979 18.0416 98.7669 18.0916 cv
98.6789 18.1256 98.7989 18.2016 98.8519 18.1936 cv
99.0999 18.1536 99.6349 17.9536 100.039 17.8406 cv
cp
f
100.687 18.2504 mo
100.341 18.3724 99.8375 18.5204 99.5195 18.5954 cv
99.4005 18.6244 99.5535 18.7104 99.6135 18.7104 cv
99.9945 18.7084 100.758 18.4944 100.979 18.4364 cv
cp
f
102.582 19.4501 mo
102.225 19.5271 101.766 19.6131 101.573 19.6201 cv
101.319 19.6291 101.5 19.7191 101.6 19.7271 cv
101.963 19.7571 102.504 19.6981 102.855 19.6231 cv
cp
f
101.647 18.8588 mo
101.302 18.9808 100.703 19.0938 100.397 19.1518 cv
100.277 19.1738 100.441 19.2718 100.501 19.2728 cv
100.876 19.2768 101.73 19.1098 101.951 19.0508 cv
cp
f
95.7617 20.141 mo
96.1587 19.588 li
132.809 42.795 li
133.211 43.05 133.673 43.356 134.14 43.676 cv
134.324 43.423 li
134.497 43.245 134.64 43.094 134.738 43.006 cv
134.919 43.072 135.574 43.387 135.939 43.618 cv
136.79 44.158 137.561 45.312 137.421 46.085 cv
136.709 46.497 135.28 46.259 134.429 45.72 cv
134.064 45.488 133.507 45.037 133.374 44.903 cv
133.423 44.79 133.639 44.407 133.76 44.202 cv
101.053 23.491 li
100.088 23.512 99.0947 23.632 98.1027 23.014 cv
97.7217 22.778 96.4197 21.946 95.6667 21.434 cv
95.8337 21.34 96.3417 21.039 96.7457 20.764 cv
cp
f
95.9121 19.9491 mo
96.9481 20.6051 li
96.5431 20.8811 96.0471 21.1921 95.8801 21.2861 cv
96.6331 21.7981 97.8681 22.5881 98.2481 22.8241 cv
99.2431 23.4421 100.237 23.3211 101.204 23.3001 cv
132.523 43.1321 li
133.582 43.8021 135.141 44.6981 136.172 45.2051 cv
136.141 45.2471 li
135.254 45.1161 134.43 44.6701 133.746 44.2371 cv
133.618 44.4441 133.523 44.6251 133.472 44.7421 cv
133.605 44.8761 134.162 45.3281 134.526 45.5591 cv
135.379 46.0981 136.757 46.3051 137.469 45.8931 cv
137.609 45.1191 136.888 43.9971 136.036 43.4581 cv
135.672 43.2261 135.016 42.9111 134.835 42.8451 cv
134.742 42.9301 134.441 43.2711 134.302 43.4541 cv
101.593 22.7421 li
101.253 21.8961 100.999 20.9911 100.019 20.3591 cv
99.6431 20.1161 98.4011 19.3371 97.6131 18.8731 cv
97.5831 19.0531 97.4631 19.5961 97.3431 20.0511 cv
96.3091 19.3971 li
cp
0 0 0 0 cmyk
f
97.9238 20.5463 mo
97.9728 20.2103 97.9828 19.6583 97.9828 19.5253 cv
97.9828 19.4363 98.1028 19.5123 98.1138 19.5613 cv
98.1688 19.7923 98.1718 20.3323 98.2118 20.7273 cv
cp
1 1 .2 0 cmyk
f
98.8584 21.1366 mo
98.8494 20.7906 98.8064 20.2976 98.7624 19.9916 cv
98.7464 19.8776 98.8884 19.9786 98.9104 20.0306 cv
99.0504 20.3626 99.1274 21.1086 99.1514 21.3226 cv
cp
f
100.753 22.3373 mo
100.695 21.9983 100.608 21.5663 100.543 21.3963 cv
100.457 21.1713 100.613 21.2953 100.658 21.3783 cv
100.825 21.6843 100.969 22.1773 101.027 22.5113 cv
cp
f
99.8193 21.7455 mo
99.8103 21.3995 99.6983 20.8355 99.6403 20.5475 cv
99.6173 20.4345 99.7753 20.5415 99.7983 20.5925 cv
99.9423 20.9175 100.097 21.7235 100.123 21.9375 cv
cp
f
97.6484 20.9296 mo
97.3354 21.0976 96.7934 21.3126 96.6624 21.3636 cv
96.5744 21.3966 96.6944 21.4726 96.7474 21.4646 cv
96.9954 21.4256 97.5304 21.2246 97.9344 21.1116 cv
cp
f
98.5815 21.5219 mo
98.2375 21.6439 97.7335 21.7919 97.4145 21.8669 cv
97.2955 21.8959 97.4495 21.9819 97.5085 21.9809 cv
97.8895 21.9799 98.6545 21.7659 98.8745 21.7079 cv
cp
f
100.478 22.7211 mo
100.12 22.7981 99.6615 22.8841 99.4685 22.8911 cv
99.2145 22.9001 99.3955 22.9901 99.4955 22.9981 cv
99.8585 23.0281 100.399 22.9691 100.751 22.8951 cv
cp
f
99.543 22.1302 mo
99.198 22.2522 98.599 22.3652 98.293 22.4232 cv
98.173 22.4452 98.337 22.5432 98.397 22.5442 cv
98.772 22.5472 99.626 22.3812 99.846 22.3222 cv
cp
f
93.6143 23.3812 mo
94.0113 22.8282 li
130.661 46.0352 li
131.063 46.2902 131.525 46.5962 131.992 46.9162 cv
132.176 46.6632 li
132.349 46.4852 132.493 46.3352 132.59 46.2462 cv
132.771 46.3132 133.426 46.6272 133.791 46.8592 cv
134.642 47.3982 135.413 48.5522 135.273 49.3252 cv
134.561 49.7382 133.133 49.4992 132.281 48.9602 cv
131.916 48.7292 131.359 48.2772 131.226 48.1432 cv
131.275 48.0302 131.491 47.6482 131.612 47.4422 cv
98.9053 26.7312 li
97.9403 26.7522 96.9473 26.8722 95.9553 26.2542 cv
95.5743 26.0182 94.2723 25.1862 93.5193 24.6742 cv
93.6863 24.5802 94.1943 24.2792 94.5983 24.0042 cv
cp
f
93.7646 23.1893 mo
94.8006 23.8453 li
94.3956 24.1213 93.8996 24.4323 93.7326 24.5263 cv
94.4856 25.0383 95.7216 25.8283 96.1016 26.0643 cv
97.0956 26.6823 98.0896 26.5613 99.0566 26.5403 cv
130.376 46.3723 li
131.435 47.0423 132.994 47.9373 134.026 48.4453 cv
133.994 48.4873 li
133.108 48.3563 132.284 47.9103 131.599 47.4773 cv
131.472 47.6843 131.376 47.8653 131.325 47.9823 cv
131.458 48.1163 132.015 48.5683 132.38 48.7993 cv
133.232 49.3383 134.611 49.5453 135.322 49.1333 cv
135.463 48.3593 134.741 47.2373 133.889 46.6983 cv
133.525 46.4663 132.869 46.1513 132.688 46.0853 cv
132.595 46.1703 132.294 46.5113 132.155 46.6943 cv
99.4456 25.9823 li
99.1056 25.1363 98.8516 24.2313 97.8716 23.5993 cv
97.4956 23.3563 96.2536 22.5773 95.4656 22.1133 cv
95.4356 22.2943 95.3156 22.8363 95.1956 23.2913 cv
94.1616 22.6373 li
cp
0 0 0 0 cmyk
f
95.7764 23.7865 mo
95.8254 23.4505 95.8354 22.8985 95.8354 22.7655 cv
95.8354 22.6765 95.9554 22.7525 95.9674 22.8015 cv
96.0214 23.0325 96.0244 23.5725 96.0644 23.9675 cv
cp
1 1 .2 0 cmyk
f
96.7109 24.3768 mo
96.7019 24.0308 96.6589 23.5378 96.6149 23.2318 cv
96.5989 23.1188 96.7409 23.2188 96.7629 23.2708 cv
96.9029 23.6028 96.9799 24.3488 97.0039 24.5628 cv
cp
f
98.6055 25.5775 mo
98.5475 25.2385 98.4605 24.8065 98.3955 24.6365 cv
98.3095 24.4115 98.4655 24.5355 98.5105 24.6195 cv
98.6775 24.9245 98.8215 25.4175 98.8795 25.7515 cv
cp
f
97.6719 24.9857 mo
97.6629 24.6397 97.5509 24.0757 97.4929 23.7877 cv
97.4699 23.6747 97.6279 23.7817 97.6509 23.8337 cv
97.7959 24.1577 97.9509 24.9637 97.9759 25.1777 cv
cp
f
95.501 24.1698 mo
95.188 24.3378 94.646 24.5528 94.515 24.6038 cv
94.427 24.6368 94.547 24.7128 94.6 24.7048 cv
94.848 24.6658 95.383 24.4658 95.788 24.3528 cv
cp
f
96.4346 24.7621 mo
96.0896 24.8841 95.5856 25.0321 95.2676 25.1071 cv
95.1486 25.1361 95.3016 25.2221 95.3616 25.2221 cv
95.7426 25.2201 96.5066 25.0061 96.7276 24.9481 cv
cp
f
98.3301 25.9613 mo
97.9741 26.0383 97.5141 26.1243 97.3211 26.1313 cv
97.0681 26.1403 97.2481 26.2303 97.3481 26.2383 cv
97.7111 26.2693 98.2521 26.2093 98.6041 26.1353 cv
cp
f
97.3955 25.3705 mo
97.0505 25.4925 96.4515 25.6055 96.1455 25.6635 cv
96.0255 25.6855 96.1895 25.7835 96.2495 25.7845 cv
96.6245 25.7875 97.4785 25.6215 97.6995 25.5625 cv
cp
f
138.202 13.6259 mo
137.805 13.0729 li
101.156 36.2799 li
100.753 36.5349 100.291 36.8409 99.8241 37.1609 cv
99.6401 36.9079 li
99.4671 36.7299 99.3241 36.5799 99.2271 36.4909 cv
99.0461 36.5579 98.3901 36.8729 98.0251 37.1039 cv
97.1741 37.6429 96.4031 38.7969 96.5441 39.5699 cv
97.2551 39.9829 98.6841 39.7439 99.5351 39.2049 cv
99.9001 38.9739 100.457 38.5219 100.59 38.3879 cv
100.541 38.2749 100.326 37.8929 100.204 37.6869 cv
132.911 16.9759 li
133.877 16.9969 134.869 17.1169 135.861 16.4999 cv
136.242 16.2629 137.545 15.4309 138.298 14.9189 cv
138.131 14.8249 137.623 14.5249 137.219 14.2489 cv
cp
f
137.655 12.8817 mo
136.621 13.5367 li
136.501 13.0817 136.381 12.5387 136.35 12.3587 cv
135.562 12.8217 134.32 13.6017 133.944 13.8437 cv
132.965 14.4757 132.711 15.3817 132.371 16.2277 cv
99.6623 36.9397 li
99.5223 36.7567 99.2213 36.4157 99.1293 36.3307 cv
98.9473 36.3967 98.2923 36.7117 97.9273 36.9427 cv
97.0763 37.4817 96.3543 38.6047 96.4953 39.3787 cv
97.2063 39.7907 98.5853 39.5827 99.4373 39.0447 cv
99.8013 38.8127 100.358 38.3607 100.492 38.2277 cv
100.441 38.1107 100.345 37.9287 100.217 37.7217 cv
99.5343 38.1547 98.7103 38.6017 97.8223 38.7327 cv
97.7923 38.6897 li
98.8233 38.1827 100.382 37.2877 101.44 36.6167 cv
132.759 16.7857 li
133.726 16.8057 134.72 16.9267 135.715 16.3087 cv
136.095 16.0727 137.331 15.2827 138.084 14.7707 cv
137.917 14.6767 137.421 14.3667 137.016 14.0897 cv
138.052 13.4337 li
cp
0 0 0 0 cmyk
f
136.04 14.0311 mo
135.991 13.6951 135.981 13.1431 135.981 13.0101 cv
135.981 12.9211 135.861 12.9971 135.85 13.0461 cv
135.795 13.2771 135.793 13.8171 135.753 14.2121 cv
cp
1 1 .2 0 cmyk
f
135.105 14.6215 mo
135.115 14.2755 135.158 13.7825 135.201 13.4765 cv
135.217 13.3625 135.076 13.4635 135.053 13.5155 cv
134.913 13.8475 134.837 14.5935 134.813 14.8075 cv
cp
f
133.211 15.8221 mo
133.269 15.4831 133.356 15.0511 133.421 14.8811 cv
133.507 14.6561 133.351 14.7801 133.306 14.8641 cv
133.139 15.1691 132.995 15.6621 132.937 15.9961 cv
cp
f
134.145 15.2308 mo
134.154 14.8848 134.266 14.3208 134.324 14.0328 cv
134.346 13.9198 134.189 14.0258 134.165 14.0778 cv
134.021 14.4028 133.867 15.2088 133.84 15.4218 cv
cp
f
136.315 14.4144 mo
136.628 14.5824 137.17 14.7974 137.301 14.8484 cv
137.389 14.8814 137.269 14.9574 137.216 14.9494 cv
136.968 14.9104 136.434 14.7104 136.029 14.5974 cv
cp
f
135.382 15.0067 mo
135.727 15.1287 136.231 15.2767 136.549 15.3517 cv
136.668 15.3807 136.514 15.4667 136.455 15.4667 cv
136.074 15.4647 135.309 15.2507 135.089 15.1927 cv
cp
f
133.487 16.2064 mo
133.843 16.2824 134.303 16.3694 134.495 16.3764 cv
134.749 16.3854 134.568 16.4754 134.469 16.4824 cv
134.105 16.5134 133.564 16.4544 133.213 16.3794 cv
cp
f
134.421 15.6151 mo
134.766 15.7371 135.365 15.8501 135.671 15.9081 cv
135.791 15.9301 135.627 16.0281 135.567 16.0291 cv
135.192 16.0321 134.339 15.8661 134.118 15.8071 cv
cp
f
140.303 16.8695 mo
139.906 16.3175 li
103.257 39.5235 li
102.854 39.7785 102.392 40.0845 101.925 40.4045 cv
101.741 40.1515 li
101.568 39.9735 101.425 39.8235 101.328 39.7345 cv
101.147 39.8015 100.491 40.1165 100.126 40.3475 cv
99.2747 40.8865 98.5037 42.0405 98.6437 42.8145 cv
99.3557 43.2265 100.785 42.9875 101.636 42.4485 cv
102.001 42.2175 102.558 41.7655 102.691 41.6325 cv
102.642 41.5185 102.427 41.1365 102.305 40.9305 cv
135.012 20.2195 li
135.977 20.2405 136.97 20.3605 137.962 19.7435 cv
138.343 19.5065 139.646 18.6755 140.398 18.1625 cv
140.232 18.0685 139.723 17.7685 139.319 17.4925 cv
cp
f
139.756 16.1254 mo
138.722 16.7804 li
138.602 16.3254 138.482 15.7824 138.451 15.6024 cv
137.663 16.0654 136.421 16.8454 136.045 17.0884 cv
135.066 17.7194 134.812 18.6254 134.472 19.4714 cv
101.763 40.1834 li
101.623 40.0004 101.322 39.6594 101.23 39.5744 cv
101.048 39.6404 100.393 39.9554 100.028 40.1864 cv
99.1769 40.7264 98.4549 41.8484 98.5959 42.6224 cv
99.3069 43.0344 100.686 42.8274 101.538 42.2884 cv
101.902 42.0574 102.459 41.6044 102.593 41.4714 cv
102.542 41.3544 102.446 41.1734 102.318 40.9654 cv
101.634 41.3984 100.811 41.8454 99.9229 41.9764 cv
99.8929 41.9334 li
100.924 41.4264 102.483 40.5314 103.541 39.8604 cv
134.86 20.0294 li
135.827 20.0494 136.821 20.1704 137.817 19.5524 cv
138.196 19.3164 139.432 18.5264 140.185 18.0154 cv
140.018 17.9204 139.523 17.6104 139.117 17.3334 cv
140.152 16.6784 li
cp
0 0 0 0 cmyk
f
138.141 17.2748 mo
138.092 16.9388 138.082 16.3868 138.082 16.2538 cv
138.082 16.1648 137.962 16.2408 137.951 16.2898 cv
137.896 16.5208 137.893 17.0608 137.854 17.4558 cv
cp
1 1 .2 0 cmyk
f
137.206 17.8656 mo
137.215 17.5196 137.258 17.0256 137.303 16.7206 cv
137.318 16.6066 137.176 16.7076 137.154 16.7596 cv
137.014 17.0916 136.938 17.8376 136.913 18.0516 cv
cp
f
135.311 19.0663 mo
135.369 18.7273 135.456 18.2943 135.521 18.1253 cv
135.607 17.9003 135.451 18.0243 135.406 18.1073 cv
135.239 18.4123 135.095 18.9053 135.037 19.2393 cv
cp
f
136.245 18.4745 mo
136.254 18.1285 136.366 17.5645 136.424 17.2765 cv
136.447 17.1635 136.289 17.2695 136.266 17.3215 cv
136.122 17.6465 135.967 18.4525 135.942 18.6665 cv
cp
f
138.416 17.6586 mo
138.729 17.8266 139.271 18.0416 139.402 18.0916 cv
139.49 18.1256 139.37 18.2016 139.317 18.1936 cv
139.069 18.1536 138.535 17.9536 138.13 17.8406 cv
cp
f
137.483 18.2504 mo
137.827 18.3724 138.331 18.5204 138.649 18.5954 cv
138.768 18.6244 138.615 18.7104 138.555 18.7104 cv
138.175 18.7084 137.41 18.4944 137.189 18.4364 cv
cp
f
135.587 19.4501 mo
135.944 19.5271 136.403 19.6131 136.595 19.6201 cv
136.849 19.6291 136.669 19.7191 136.569 19.7271 cv
136.206 19.7571 135.665 19.6981 135.313 19.6231 cv
cp
f
136.521 18.8588 mo
136.867 18.9808 137.465 19.0938 137.771 19.1518 cv
137.891 19.1738 137.727 19.2718 137.667 19.2728 cv
137.292 19.2768 136.439 19.1098 136.219 19.0508 cv
cp
f
142.407 20.141 mo
142.01 19.588 li
105.36 42.795 li
104.958 43.05 104.496 43.356 104.029 43.676 cv
103.845 43.423 li
103.672 43.245 103.529 43.094 103.432 43.006 cv
103.251 43.072 102.595 43.387 102.23 43.618 cv
101.379 44.158 100.608 45.312 100.749 46.085 cv
101.46 46.497 102.889 46.259 103.74 45.72 cv
104.105 45.488 104.662 45.037 104.795 44.903 cv
104.746 44.79 104.531 44.407 104.409 44.202 cv
137.116 23.491 li
138.082 23.512 139.074 23.632 140.066 23.014 cv
140.447 22.778 141.75 21.946 142.503 21.434 cv
142.336 21.34 141.828 21.039 141.424 20.764 cv
cp
f
141.86 19.3969 mo
140.826 20.0509 li
140.706 19.5969 140.586 19.0539 140.555 18.8739 cv
139.767 19.3369 138.525 20.1169 138.149 20.3589 cv
137.17 20.9909 136.916 21.8969 136.576 22.7429 cv
103.867 43.4539 li
103.727 43.2719 103.426 42.9299 103.334 42.8449 cv
103.152 42.9119 102.497 43.2269 102.132 43.4579 cv
101.281 43.9969 100.559 45.1199 100.7 45.8929 cv
101.412 46.3059 102.79 46.0979 103.642 45.5589 cv
104.007 45.3279 104.563 44.8759 104.697 44.7429 cv
104.646 44.6259 104.55 44.4439 104.423 44.2369 cv
103.739 44.6699 102.915 45.1169 102.027 45.2479 cv
101.997 45.2049 li
103.028 44.6979 104.587 43.8019 105.645 43.1319 cv
136.964 23.2999 li
137.931 23.3209 138.925 23.4419 139.92 22.8239 cv
140.3 22.5879 141.536 21.7979 142.289 21.2859 cv
142.122 21.1919 141.626 20.8809 141.221 20.6049 cv
142.257 19.9489 li
cp
0 0 0 0 cmyk
f
140.245 20.5463 mo
140.196 20.2103 140.186 19.6583 140.186 19.5253 cv
140.186 19.4363 140.066 19.5123 140.055 19.5613 cv
140 19.7923 139.998 20.3323 139.958 20.7273 cv
cp
1 1 .2 0 cmyk
f
139.311 21.1366 mo
139.32 20.7906 139.363 20.2976 139.408 19.9916 cv
139.423 19.8776 139.281 19.9786 139.258 20.0306 cv
139.118 20.3626 139.042 21.1086 139.018 21.3226 cv
cp
f
137.416 22.3373 mo
137.474 21.9983 137.561 21.5663 137.626 21.3963 cv
137.712 21.1713 137.556 21.2953 137.511 21.3783 cv
137.345 21.6843 137.2 22.1773 137.142 22.5113 cv
cp
f
138.35 21.7455 mo
138.359 21.3995 138.472 20.8355 138.529 20.5475 cv
138.552 20.4345 138.394 20.5415 138.371 20.5925 cv
138.227 20.9175 138.072 21.7235 138.046 21.9375 cv
cp
f
140.52 20.9296 mo
140.833 21.0976 141.375 21.3126 141.507 21.3636 cv
141.595 21.3966 141.474 21.4726 141.421 21.4646 cv
141.173 21.4256 140.639 21.2246 140.234 21.1116 cv
cp
f
139.588 21.5219 mo
139.932 21.6439 140.436 21.7919 140.755 21.8669 cv
140.873 21.8959 140.72 21.9819 140.661 21.9809 cv
140.28 21.9799 139.515 21.7659 139.294 21.7079 cv
cp
f
137.692 22.7211 mo
138.048 22.7981 138.508 22.8841 138.7 22.8911 cv
138.954 22.9001 138.773 22.9901 138.674 22.9981 cv
138.31 23.0281 137.769 22.9691 137.418 22.8951 cv
cp
f
138.626 22.1302 mo
138.971 22.2522 139.57 22.3652 139.876 22.4232 cv
139.996 22.4452 139.832 22.5432 139.772 22.5442 cv
139.397 22.5472 138.544 22.3812 138.323 22.3222 cv
cp
f
144.555 23.3812 mo
144.158 22.8282 li
107.508 46.0352 li
107.106 46.2902 106.644 46.5962 106.177 46.9162 cv
105.993 46.6632 li
105.82 46.4852 105.677 46.3352 105.579 46.2462 cv
105.399 46.3132 104.743 46.6272 104.378 46.8592 cv
103.527 47.3982 102.756 48.5522 102.897 49.3252 cv
103.608 49.7382 105.037 49.4992 105.888 48.9602 cv
106.253 48.7292 106.81 48.2772 106.943 48.1432 cv
106.894 48.0302 106.678 47.6482 106.557 47.4422 cv
139.264 26.7312 li
140.229 26.7522 141.222 26.8722 142.214 26.2542 cv
142.595 26.0182 143.898 25.1862 144.65 24.6742 cv
144.484 24.5802 143.975 24.2792 143.571 24.0042 cv
cp
f
144.008 22.6371 mo
142.974 23.2911 li
142.854 22.8371 142.734 22.2941 142.703 22.1141 cv
141.915 22.5771 140.673 23.3571 140.297 23.5991 cv
139.318 24.2311 139.064 25.1371 138.724 25.9831 cv
106.015 46.6951 li
105.875 46.5111 105.574 46.1711 105.482 46.0861 cv
105.3 46.1521 104.645 46.4671 104.28 46.6981 cv
103.429 47.2371 102.707 48.3601 102.848 49.1341 cv
103.559 49.5461 104.938 49.3381 105.79 48.7991 cv
106.154 48.5681 106.711 48.1161 106.845 47.9831 cv
106.793 47.8651 106.698 47.6841 106.57 47.4771 cv
105.887 47.9101 105.062 48.3571 104.175 48.4871 cv
104.144 48.4451 li
105.175 47.9371 106.735 47.0421 107.793 46.3721 cv
139.112 26.5401 li
140.079 26.5611 141.073 26.6821 142.068 26.0641 cv
142.448 25.8281 143.684 25.0381 144.437 24.5261 cv
144.27 24.4321 143.774 24.1211 143.369 23.8451 cv
144.404 23.1891 li
cp
0 0 0 0 cmyk
f
142.393 23.7865 mo
142.344 23.4505 142.334 22.8985 142.334 22.7655 cv
142.334 22.6765 142.214 22.7525 142.203 22.8015 cv
142.148 23.0325 142.145 23.5725 142.105 23.9675 cv
cp
1 1 .2 0 cmyk
f
141.458 24.3768 mo
141.467 24.0308 141.51 23.5378 141.555 23.2318 cv
141.57 23.1188 141.428 23.2188 141.406 23.2708 cv
141.266 23.6028 141.189 24.3488 141.165 24.5628 cv
cp
f
139.564 25.5775 mo
139.622 25.2385 139.709 24.8065 139.774 24.6365 cv
139.86 24.4115 139.704 24.5355 139.659 24.6195 cv
139.492 24.9245 139.348 25.4175 139.29 25.7515 cv
cp
f
140.497 24.9857 mo
140.506 24.6397 140.618 24.0757 140.676 23.7877 cv
140.699 23.6747 140.541 23.7817 140.518 23.8337 cv
140.374 24.1577 140.219 24.9637 140.193 25.1777 cv
cp
f
142.668 24.1698 mo
142.981 24.3378 143.523 24.5528 143.654 24.6038 cv
143.742 24.6368 143.622 24.7128 143.569 24.7048 cv
143.321 24.6658 142.786 24.4658 142.382 24.3528 cv
cp
f
141.735 24.7621 mo
142.079 24.8841 142.583 25.0321 142.902 25.1071 cv
143.021 25.1361 142.867 25.2221 142.808 25.2221 cv
142.427 25.2201 141.662 25.0061 141.442 24.9481 cv
cp
f
139.839 25.9613 mo
140.196 26.0383 140.655 26.1243 140.848 26.1313 cv
141.102 26.1403 140.921 26.2303 140.821 26.2383 cv
140.458 26.2693 139.917 26.2093 139.566 26.1353 cv
cp
f
140.773 25.3705 mo
141.118 25.4925 141.717 25.6055 142.023 25.6635 cv
142.143 25.6855 141.979 25.7835 141.919 25.7845 cv
141.544 25.7875 140.69 25.6215 140.47 25.5625 cv
cp
f
120.079 44.6259 mo
120.065 44.3539 120.065 43.5499 120.052 43.4279 cv
120.038 43.3049 119.97 43.2919 119.902 43.3329 cv
119.834 43.3729 119.724 43.4659 119.6 43.5619 cv
119.6 43.4119 119.621 43.1039 119.621 42.9949 cv
119.621 42.8229 119.598 42.8079 119.476 42.9109 cv
119.417 42.9609 119.368 42.9179 119.345 42.8529 cv
119.306 42.7419 119.099 42.2019 119.058 42.0799 cv
119.016 41.9569 118.958 41.9799 118.894 42.1069 cv
118.827 42.2429 118.67 42.6669 118.629 42.7899 cv
118.578 42.9409 118.552 42.9379 118.455 42.8609 cv
118.312 42.7469 118.279 42.7989 118.291 42.8909 cv
118.313 43.0669 118.418 43.4819 118.445 43.7139 cv
118.377 43.5909 118.224 43.4489 118.145 43.3589 cv
118.06 43.2629 117.999 43.3049 117.996 43.4409 cv
117.992 43.5929 117.969 44.1079 117.969 44.4629 cv
119.086 45.2419 li
cp
1 0 1 0 cmyk
f
111.487 50.2303 mo
111.151 50.1213 110.757 49.9793 110.626 49.9383 cv
110.499 49.8973 110.479 49.8063 110.597 49.7553 cv
110.712 49.7063 110.891 49.6343 111.027 49.5803 cv
110.799 49.5343 110.401 49.4713 110.229 49.4293 cv
110.056 49.3883 110.082 49.3083 110.189 49.2503 cv
110.249 49.2183 110.255 49.2013 110.172 49.1403 cv
110.068 49.0633 109.746 48.7623 109.637 48.6563 cv
109.536 48.5573 109.533 48.4933 109.662 48.4923 cv
109.791 48.4913 110.305 48.4793 110.445 48.4703 cv
110.566 48.4623 110.577 48.4563 110.514 48.3623 cv
110.428 48.2333 110.442 48.1723 110.534 48.2023 cv
110.637 48.2363 111.074 48.3783 111.216 48.4243 cv
111.163 48.2783 111.133 48.1533 111.114 48.0763 cv
111.096 47.9993 111.131 47.9383 111.252 47.9633 cv
111.372 47.9883 112.136 48.2363 112.399 48.3083 cv
112.707 49.5053 li
cp
f
113.551 57.2665 mo
113.403 57.4955 113.053 57.9725 112.991 58.0795 cv
112.931 58.1865 112.978 58.2375 113.057 58.2445 cv
113.136 58.2515 113.268 58.2355 113.438 58.2115 cv
113.35 58.3325 112.834 58.8375 112.77 58.9265 cv
112.706 59.0145 112.982 58.9625 113.066 58.9425 cv
113.134 58.9275 113.123 58.9425 113.104 59.0625 cv
113.083 59.1835 112.909 59.6735 112.871 59.7965 cv
112.832 59.9195 112.915 59.9695 113.041 59.9045 cv
113.176 59.8335 113.605 59.5315 113.71 59.4555 cv
113.811 59.3835 113.823 59.3805 113.874 59.6175 cv
113.9 59.7365 113.983 59.8575 114.076 59.7065 cv
114.169 59.5555 114.487 58.8315 114.602 58.5475 cv
114.585 58.6865 114.625 58.8915 114.636 59.0105 cv
114.648 59.1385 114.737 59.1505 114.806 59.0325 cv
114.874 58.9135 115.219 58.5085 115.428 58.2225 cv
115.172 57.0195 li
cp
f
122.69 58.5897 mo
122.861 58.8017 123.235 59.3317 123.318 59.4227 cv
123.401 59.5137 123.464 59.4857 123.495 59.4117 cv
123.526 59.3387 123.565 59.2437 123.607 59.0947 cv
123.696 59.2157 123.91 59.5277 123.974 59.6157 cv
124.047 59.7167 124.091 59.7407 124.123 59.5997 cv
124.154 59.4607 124.165 59.4617 124.273 59.5177 cv
124.38 59.5737 124.751 59.8347 124.855 59.9097 cv
124.961 59.9847 125.054 59.9517 125.031 59.8117 cv
125.005 59.6607 124.922 59.2277 124.883 59.1047 cv
124.844 58.9817 124.852 59.0027 124.974 59.0117 cv
125.232 59.0327 125.192 58.9417 125.077 58.8057 cv
124.962 58.6717 124.673 58.3997 124.515 58.2287 cv
124.642 58.2877 124.848 58.3227 124.965 58.3387 cv
125.149 58.3637 125.195 58.3097 125.072 58.1717 cv
124.981 58.0687 124.604 57.6477 124.395 57.3607 cv
122.889 57.1477 li
cp
f
126.146 50.3632 mo
126.401 50.2662 127.113 50.0972 127.272 50.0662 cv
127.385 50.0442 127.423 49.9862 127.317 49.8942 cv
127.257 49.8422 127.16 49.7602 127.031 49.6732 cv
127.173 49.6262 127.522 49.4792 127.625 49.4452 cv
127.73 49.4112 127.645 49.3392 127.571 49.2952 cv
127.483 49.2432 127.483 49.2282 127.563 49.1732 cv
127.662 49.1032 128.145 48.7812 128.249 48.7042 cv
128.352 48.6282 128.313 48.5782 128.171 48.5572 cv
128.021 48.5352 127.585 48.5572 127.456 48.5562 cv
127.326 48.5552 127.315 48.5472 127.345 48.4292 cv
127.393 48.2392 127.382 48.1882 127.218 48.2562 cv
127.054 48.3232 126.739 48.5142 126.526 48.6112 cv
126.622 48.5092 126.679 48.3332 126.716 48.2192 cv
126.78 48.0262 126.735 48.0192 126.61 48.0732 cv
126.484 48.1292 125.948 48.2872 125.61 48.3972 cv
124.92 49.7702 li
cp
f
127.175 49.2318 mo
127.401 49.3778 li
127.297 49.4118 126.941 49.5298 126.833 49.5508 cv
126.65 49.5858 126.7 49.6498 126.788 49.7258 cv
126.859 49.7868 126.967 49.8288 127.08 49.9278 cv
126.985 49.9478 126.606 50.0098 126.262 50.1018 cv
126.002 49.9278 125.719 49.8218 125.448 49.7828 cv
126.068 49.5228 126.659 49.2308 126.792 49.1828 cv
126.972 49.1168 127.013 48.9498 126.749 49.0478 cv
126.552 49.1208 125.924 49.3238 125.298 49.5338 cv
125.589 49.2758 125.731 48.9538 125.735 48.5688 cv
125.968 48.4948 126.344 48.3748 126.477 48.3208 cv
126.443 48.3988 126.39 48.5558 126.337 48.6588 cv
126.247 48.8358 126.258 48.9358 126.543 48.7698 cv
126.654 48.7038 127.138 48.4818 127.138 48.4818 cv
127.124 48.7258 li
127.232 48.7478 127.629 48.7128 127.943 48.7108 cv
127.783 48.7918 127.349 49.0608 127.175 49.2318 cv
124.798 58.1068 mo
124.713 58.0988 124.531 58.0648 124.418 58.0468 cv
124.243 58.0198 124.194 58.1888 124.371 58.3148 cv
124.476 58.3908 124.879 58.8488 124.879 58.8488 cv
124.607 58.8168 li
124.66 58.9348 124.753 59.3158 124.815 59.6418 cv
124.689 59.5138 124.258 59.2598 124.048 59.1288 cv
123.999 59.3678 li
123.935 59.2798 123.727 58.9418 123.673 58.8458 cv
123.62 58.7498 123.541 58.7488 123.51 58.8218 cv
123.479 58.8948 123.417 59.0278 123.371 59.1828 cv
123.331 59.1118 123.179 58.8638 123.004 58.6228 cv
123.129 58.2838 123.132 57.9318 123.108 57.6238 cv
123.445 58.0218 124.034 58.6598 124.123 58.7788 cv
124.238 58.9318 124.41 58.9218 124.239 58.6978 cv
124.114 58.5338 123.667 57.9108 123.375 57.4988 cv
123.591 57.5898 123.774 57.6068 124 57.6068 cv
124.1 57.6068 124.203 57.5938 124.307 57.5708 cv
124.448 57.7298 124.7 57.9918 124.798 58.1068 cv
119.226 45.0178 mo
119.196 44.5008 119.102 43.6118 119.101 43.4608 cv
119.1 43.2698 118.957 43.1738 118.959 43.4558 cv
118.962 43.6578 118.948 44.3988 118.936 44.9038 cv
118.711 44.5298 118.47 44.3468 118.17 44.2828 cv
118.165 44.0748 118.155 43.7808 118.146 43.6458 cv
118.209 43.7028 118.336 43.8358 118.418 43.9178 cv
118.542 44.0428 118.683 43.9348 118.613 43.7288 cv
118.572 43.6058 118.477 43.0428 118.477 43.0428 cv
118.648 43.1848 li
118.702 43.0888 118.881 42.6388 118.977 42.3398 cv
119.004 42.5168 119.181 43.0188 119.289 43.2368 cv
119.466 43.0898 li
119.466 43.1988 119.44 43.5778 119.426 43.6868 cv
119.412 43.7958 119.508 43.8568 119.575 43.8158 cv
119.644 43.7748 119.73 43.7108 119.864 43.5978 cv
119.852 43.7058 119.817 44.1898 119.846 44.5638 cv
119.523 44.6598 119.342 44.8328 119.226 45.0178 cv
114.804 58.7788 mo
114.786 58.6948 114.762 58.5128 114.744 58.3988 cv
114.716 58.2238 114.54 58.2288 114.474 58.4368 cv
114.435 58.5598 114.02 59.4118 114.02 59.4118 cv
113.938 59.1088 li
113.742 59.2478 113.368 59.4738 113.136 59.6448 cv
113.218 59.4858 113.355 58.9708 113.395 58.7308 cv
113.116 58.7848 li
113.18 58.6968 113.625 58.2188 113.7 58.1388 cv
113.776 58.0588 113.73 57.9978 113.633 58.0078 cv
113.553 58.0158 113.438 58.0128 113.274 58.0148 cv
113.338 57.9448 113.552 57.6648 113.741 57.3908 cv
113.844 57.4038 113.949 57.4108 114.057 57.4108 cv
114.234 57.4108 114.501 57.3808 114.78 57.2478 cv
114.448 57.7128 113.963 58.4178 113.881 58.5298 cv
113.769 58.6848 113.828 58.8458 113.992 58.6178 cv
114.117 58.4428 114.724 57.7428 115.081 57.3258 cv
115.001 57.6828 115.025 58.0048 115.129 58.2938 cv
115.014 58.4598 114.87 58.6728 114.804 58.7788 cv
111.058 49.0508 mo
111.236 49.1188 111.853 49.3268 112.313 49.4898 cv
111.956 49.5068 111.659 49.6798 111.43 50.0018 cv
111.237 49.9438 110.99 49.8738 110.87 49.8438 cv
110.944 49.8008 111.119 49.7048 111.221 49.6498 cv
111.376 49.5658 111.386 49.4658 111.093 49.4238 cv
110.965 49.4058 110.43 49.3248 110.43 49.3248 cv
110.597 49.2238 li
110.523 49.1428 110.169 48.8488 109.913 48.6658 cv
110.09 48.6758 110.591 48.6508 110.835 48.6298 cv
110.732 48.4348 li
110.835 48.4688 111.205 48.5928 111.304 48.6388 cv
111.404 48.6858 111.491 48.6138 111.474 48.5368 cv
111.456 48.4588 111.436 48.3668 111.4 48.2118 cv
111.503 48.2588 111.945 48.4398 112.31 48.5198 cv
112.309 48.5498 112.306 48.5798 112.306 48.6098 cv
112.306 48.8478 112.373 49.0538 112.505 49.2558 cv
112.003 49.1268 111.245 48.9718 111.114 48.9208 cv
110.936 48.8518 110.795 48.9498 111.058 49.0508 cv
128.172 48.5578 mo
128.022 48.5348 127.585 48.5568 127.456 48.5558 cv
127.327 48.5548 127.316 48.5468 127.346 48.4298 cv
127.393 48.2398 127.383 48.1878 127.219 48.2558 cv
127.055 48.3228 126.738 48.5138 126.527 48.6108 cv
126.622 48.5088 126.68 48.3328 126.717 48.2198 cv
126.78 48.0258 126.736 48.0188 126.611 48.0738 cv
126.508 48.1188 126.067 48.2518 125.724 48.3578 cv
125.568 46.7908 123.565 44.4828 120.476 44.4828 cv
120.325 44.4828 120.194 44.4938 120.075 44.5118 cv
120.066 44.1778 120.064 43.5358 120.052 43.4278 cv
120.038 43.3048 119.97 43.2918 119.903 43.3328 cv
119.834 43.3728 119.724 43.4658 119.601 43.5618 cv
119.601 43.4118 119.621 43.1038 119.621 42.9948 cv
119.621 42.8228 119.598 42.8078 119.477 42.9108 cv
119.417 42.9608 119.368 42.9178 119.345 42.8528 cv
119.306 42.7418 119.099 42.2018 119.058 42.0798 cv
119.017 41.9568 118.958 41.9798 118.895 42.1068 cv
118.827 42.2428 118.67 42.6668 118.629 42.7898 cv
118.578 42.9408 118.552 42.9378 118.455 42.8608 cv
118.313 42.7468 118.279 42.7988 118.291 42.8908 cv
118.314 43.0668 118.418 43.4818 118.446 43.7138 cv
118.377 43.5908 118.224 43.4488 118.146 43.3588 cv
118.061 43.2628 117.999 43.3048 117.996 43.4408 cv
117.992 43.5648 117.977 43.9338 117.971 44.2578 cv
117.944 44.2558 117.917 44.2538 117.889 44.2538 cv
115.768 44.2538 112.601 45.9558 112.327 48.2878 cv
112.019 48.1978 111.363 47.9868 111.252 47.9638 cv
111.131 47.9388 111.097 47.9988 111.115 48.0768 cv
111.133 48.1538 111.163 48.2788 111.217 48.4238 cv
111.074 48.3778 110.638 48.2358 110.534 48.2018 cv
110.443 48.1718 110.429 48.2338 110.515 48.3618 cv
110.577 48.4558 110.567 48.4628 110.445 48.4708 cv
110.306 48.4798 109.791 48.4908 109.662 48.4918 cv
109.533 48.4938 109.536 48.5568 109.638 48.6558 cv
109.746 48.7628 110.069 49.0638 110.172 49.1408 cv
110.255 49.2018 110.249 49.2178 110.19 49.2508 cv
110.082 49.3088 110.057 49.3878 110.23 49.4298 cv
110.402 49.4718 110.799 49.5348 111.028 49.5798 cv
110.892 49.6348 110.712 49.7068 110.598 49.7548 cv
110.48 49.8068 110.499 49.8968 110.626 49.9378 cv
110.725 49.9688 111.032 50.0768 111.322 50.1748 cv
111.055 50.6578 110.908 51.3938 110.908 52.3828 cv
110.908 55.0938 111.938 56.9868 113.5 57.3478 cv
113.302 57.6298 113.036 58.0008 112.991 58.0788 cv
112.931 58.1868 112.978 58.2368 113.057 58.2438 cv
113.136 58.2518 113.268 58.2358 113.438 58.2108 cv
113.35 58.3328 112.834 58.8378 112.77 58.9258 cv
112.706 59.0138 112.982 58.9618 113.066 58.9428 cv
113.134 58.9268 113.123 58.9428 113.104 59.0628 cv
113.083 59.1828 112.909 59.6738 112.871 59.7968 cv
112.832 59.9198 112.915 59.9698 113.041 59.9038 cv
113.176 59.8338 113.605 59.5308 113.71 59.4558 cv
113.811 59.3838 113.823 59.3798 113.874 59.6178 cv
113.9 59.7368 113.983 59.8578 114.076 59.7068 cv
114.169 59.5558 114.487 58.8318 114.602 58.5468 cv
114.585 58.6868 114.625 58.8918 114.636 59.0098 cv
114.648 59.1378 114.737 59.1498 114.806 59.0318 cv
114.854 58.9488 115.04 58.7228 115.218 58.4958 cv
115.769 59.5418 117.477 60.0738 119.249 60.0738 cv
121.56 60.0738 122.518 59.5178 122.895 58.8578 cv
123.067 59.0888 123.261 59.3598 123.319 59.4228 cv
123.402 59.5138 123.465 59.4848 123.495 59.4118 cv
123.527 59.3388 123.565 59.2438 123.608 59.0948 cv
123.696 59.2158 123.91 59.5268 123.974 59.6158 cv
124.048 59.7168 124.092 59.7408 124.124 59.5998 cv
124.154 59.4608 124.165 59.4608 124.274 59.5178 cv
124.381 59.5738 124.751 59.8348 124.856 59.9098 cv
124.961 59.9848 125.055 59.9518 125.031 59.8118 cv
125.006 59.6608 124.923 59.2278 124.884 59.1048 cv
124.845 58.9818 124.853 59.0028 124.975 59.0118 cv
125.233 59.0328 125.193 58.9408 125.077 58.8058 cv
124.963 58.6708 124.674 58.3988 124.516 58.2288 cv
124.643 58.2878 124.849 58.3228 124.966 58.3388 cv
125.15 58.3638 125.196 58.3098 125.072 58.1718 cv
124.997 58.0858 124.723 57.7788 124.513 57.5128 cv
125.825 57.0588 127.29 54.9638 127.29 52.2278 cv
127.29 51.3148 126.937 50.6648 126.47 50.2628 cv
126.777 50.1778 127.16 50.0878 127.273 50.0658 cv
127.385 50.0448 127.423 49.9858 127.318 49.8948 cv
127.258 49.8428 127.159 49.7598 127.03 49.6728 cv
127.173 49.6268 127.523 49.4788 127.626 49.4448 cv
127.731 49.4118 127.645 49.3388 127.571 49.2948 cv
127.484 49.2438 127.484 49.2278 127.563 49.1728 cv
127.662 49.1028 128.145 48.7808 128.248 48.7048 cv
128.352 48.6278 128.313 48.5788 128.172 48.5578 cv
1 1 .2 0 cmyk
f
121.297 55.1136 mo
121.455 55.4696 122.748 56.7996 122.748 57.6846 cv
122.748 59.1276 121.507 59.5646 119.289 59.5646 cv
116.453 59.5646 115.354 58.4156 115.354 57.6166 cv
115.354 56.8906 116.13 55.8456 116.821 55.0826 cv
117.123 54.7496 116.671 54.4486 116.473 54.8336 cv
116.257 55.2556 115.239 57.0856 114.21 57.0856 cv
112.143 57.0856 111.323 54.1026 111.323 51.8166 cv
111.323 50.5686 111.739 49.7736 112.657 49.7736 cv
113.096 49.7736 114.089 50.3596 115.561 50.8146 cv
115.982 50.9446 116.262 50.4556 115.659 50.3866 cv
114.284 50.2306 112.643 49.5556 112.643 48.6296 cv
112.643 46.4766 116.55 44.5716 117.791 44.5716 cv
118.999 44.5716 119.122 46.3876 118.972 48.5646 cv
118.945 48.9656 119.424 48.9566 119.414 48.5466 cv
119.357 48.0096 119.311 46.5966 119.243 45.9896 cv
119.181 45.4466 119.526 44.8166 120.487 44.8166 cv
122.749 44.8166 125.403 47.2346 125.403 48.5476 cv
125.403 49.3816 124.02 50.1626 122.324 50.4816 cv
121.87 50.5676 122.163 51.0656 122.535 50.8746 cv
123.076 50.5956 124.318 50.0866 125.13 50.0866 cv
125.896 50.0866 126.779 50.7426 126.779 52.0566 cv
126.779 55.0646 125.123 57.3036 124.014 57.3036 cv
123.011 57.3036 122.222 55.9746 121.637 54.9066 cv
121.482 54.6236 121.142 54.7626 121.297 55.1136 cv
0 0 0 0 cmyk
f
119.843 48.3886 mo
119.832 48.1986 119.7 46.9626 119.7 46.6566 cv
119.7 45.7316 119.96 45.3016 120.609 45.3016 cv
121.267 45.3016 121.951 46.3886 122.596 46.3886 cv
122.755 46.3886 122.911 46.3026 122.998 46.1956 cv
123.064 46.1146 123.206 46.1826 123.173 46.2946 cv
123.138 46.4136 123.128 46.5746 123.128 46.7316 cv
123.128 47.6626 124.837 47.5746 124.837 48.4136 cv
124.837 49.5406 122.988 49.9896 122.368 49.9846 cv
122.02 49.9816 122.17 49.8636 122.312 49.8636 cv
123.38 49.8576 124.628 49.0916 124.628 48.4806 cv
124.628 47.6766 122.549 47.8066 122.986 46.4126 cv
122.036 47.1096 121.425 45.5616 120.635 45.5616 cv
120.195 45.5616 119.926 45.8346 119.926 46.6376 cv
119.926 46.9206 119.966 48.1056 119.985 48.3866 cv
120.003 48.6666 119.855 48.5796 119.843 48.3886 cv
1 1 .2 0 cmyk
f
115.943 49.9398 mo
115.608 49.7668 114.576 49.6068 114.284 49.5118 cv
113.258 49.1788 113.174 48.6238 113.295 48.2388 cv
113.474 47.6618 114.773 47.3018 114.965 46.6778 cv
115.018 46.5048 114.975 46.3418 114.902 46.2378 cv
114.836 46.1458 114.944 46.0248 115.031 46.0838 cv
115.103 46.1308 115.333 46.2398 115.456 46.2778 cv
116.291 46.5368 116.861 44.9208 117.658 45.1848 cv
118.881 45.5888 118.247 47.7408 118.267 48.2828 cv
118.275 48.4958 118.121 48.5618 118.103 48.3288 cv
118.062 47.8038 118.639 45.7598 117.556 45.4208 cv
116.79 45.1798 116.38 47.1928 115.108 46.3148 cv
115.385 47.4108 113.791 47.5878 113.573 48.2878 cv
113.439 48.7148 113.759 49.1298 114.393 49.3368 cv
114.663 49.4238 115.798 49.6818 116.006 49.8408 cv
116.108 49.9198 116.168 50.0568 115.943 49.9398 cv
f
116.136 54.1683 mo
115.998 54.3913 115.49 55.4123 115.31 55.6603 cv
114.773 56.3993 114.003 56.4933 113.533 56.1523 cv
113.074 55.8183 113.04 54.4093 112.61 54.0963 cv
112.473 53.9963 112.302 53.9803 112.159 54.0113 cv
112.052 54.0353 111.961 53.9123 112.063 53.8453 cv
112.147 53.7893 112.319 53.6123 112.381 53.5063 cv
112.829 52.7563 111.458 51.8023 112.04 51.0253 cv
112.665 50.1913 114.516 51.0103 115.213 51.5193 cv
115.393 51.6503 115.405 51.8183 115.206 51.6893 cv
114.171 51.0193 112.722 50.5613 112.262 51.1943 cv
111.79 51.8443 113.482 52.9773 112.308 53.8483 cv
113.439 53.8433 113.118 55.4883 113.71 55.9183 cv
114.042 56.1593 114.692 56.0783 115.102 55.6133 cv
115.289 55.4013 115.925 54.2653 116.037 54.0663 cv
116.15 53.8683 116.274 53.9453 116.136 54.1683 cv
f
120.679 55.4672 mo
120.803 55.6502 121.483 56.4642 121.696 56.6862 cv
122.299 57.3162 122.272 57.9812 121.886 58.3422 cv
121.401 58.7962 120.101 58.2492 119.552 58.6812 cv
119.441 58.7682 119.368 58.9842 119.355 59.0722 cv
119.327 59.2492 119.17 59.2212 119.144 59.1242 cv
119.116 59.0272 118.976 58.7932 118.92 58.7162 cv
118.407 58.0092 116.976 58.8262 116.429 58.1872 cv
115.769 57.4142 116.771 56.0132 117.304 55.5442 cv
117.459 55.4072 117.626 55.4672 117.463 55.6032 cv
116.529 56.3872 116.259 57.5412 116.564 57.9602 cv
117.036 58.6102 118.832 57.4652 119.223 58.8912 cv
119.658 57.7132 121.051 58.5672 121.644 58.1362 cv
121.975 57.8962 121.955 57.3732 121.586 56.8662 cv
121.42 56.6372 120.656 55.7162 120.555 55.5572 cv
120.454 55.3982 120.555 55.2852 120.679 55.4672 cv
f
122.86 51.3431 mo
123.379 51.2911 124.041 51.1701 124.4 50.9901 cv
125.214 50.5831 125.8 50.8571 125.964 51.4621 cv
126.113 52.0101 125.492 53.1591 125.666 53.7611 cv
125.705 53.8971 125.888 54.0541 125.975 54.0781 cv
126.064 54.1021 126.06 54.2811 125.961 54.2861 cv
125.842 54.2921 125.648 54.3231 125.505 54.3731 cv
124.676 54.6541 125.076 56.1721 124.278 56.4301 cv
123.156 56.7951 122.175 55.0971 122.042 54.5781 cv
121.961 54.2631 122.09 54.3021 122.147 54.4451 cv
122.593 55.5601 123.546 56.3781 124.168 56.1761 cv
124.932 55.9271 124.303 54.1541 125.764 54.1391 cv
124.895 53.4151 125.945 52.2161 125.719 51.5201 cv
125.57 51.0601 125.152 50.9031 124.478 51.1771 cv
123.884 51.4191 123.206 51.4851 122.855 51.4791 cv
122.612 51.4741 122.515 51.3781 122.86 51.3431 cv
f
124.728 53.7079 mo
124.599 53.6109 122.436 52.9939 121.894 52.8829 cv
122.395 52.9639 124.029 52.6539 124.452 52.4279 cv
124.572 52.3639 124.566 52.1869 124.388 52.2389 cv
124.095 52.3239 122.76 52.7049 121.88 52.7599 cv
121.959 52.4999 122.01 52.2209 122.01 51.9259 cv
122.01 51.2229 121.689 50.5539 121.175 50.0009 cv
121.113 49.9329 121.039 49.8679 120.961 49.8059 cv
121.705 49.2399 122.863 48.8689 123.138 48.8319 cv
123.371 48.8009 123.419 48.5929 123.186 48.5989 cv
122.905 48.6049 121.468 49.0409 120.866 49.7349 cv
120.864 49.7329 120.861 49.7319 120.857 49.7299 cv
121.228 49.1939 122.247 47.6539 122.435 47.4709 cv
122.65 47.2609 122.441 47.1569 122.307 47.2529 cv
122.181 47.3419 121.027 49.0539 120.688 49.6239 cv
120.686 49.6219 120.683 49.6209 120.681 49.6189 cv
120.897 49.0849 121.085 47.5689 121.005 47.1189 cv
120.98 46.9859 120.811 46.9369 120.805 47.1229 cv
120.796 47.4039 120.714 48.6949 120.542 49.5459 cv
120.097 49.3269 119.537 49.2019 118.937 49.2019 cv
118.395 49.2019 117.967 49.3569 117.602 49.6019 cv
117.18 48.7269 117.215 47.2659 117.271 46.9609 cv
117.313 46.7289 117.131 46.6189 117.063 46.8419 cv
116.978 47.1269 116.951 48.7819 117.508 49.5239 cv
117.245 49.1669 115.885 47.4649 115.758 47.2089 cv
115.626 46.9389 115.463 47.1049 115.512 47.2629 cv
115.56 47.4169 116.947 49.1869 117.321 49.5959 cv
116.962 49.2359 115.458 48.5269 114.982 48.4599 cv
114.849 48.4419 114.749 48.5879 114.924 48.6509 cv
115.228 48.7599 116.695 49.3319 117.361 49.7819 cv
117.177 49.9329 117.007 50.1059 116.842 50.2899 cv
116.406 50.7779 116.208 51.4299 116.208 52.2279 cv
116.208 52.4109 116.227 52.5909 116.262 52.7669 cv
115.284 52.7899 113.933 52.1279 113.682 51.9399 cv
113.493 51.7989 113.34 51.9069 113.51 52.0669 cv
113.728 52.2709 115.196 53.0329 116.109 52.8649 cv
115.672 52.9419 113.568 53.3759 113.257 53.3979 cv
112.956 53.4189 113.032 53.6169 113.195 53.6429 cv
113.354 53.6689 115.557 53.2179 116.089 53.0649 cv
115.607 53.2259 114.301 54.2549 114.03 54.6509 cv
113.953 54.7629 114.04 54.9169 114.174 54.7889 cv
114.413 54.5599 115.646 53.4269 116.34 53.0519 cv
116.54 53.6459 116.971 54.1589 117.666 54.4789 cv
118.011 54.6379 118.463 54.7949 118.936 54.8359 cv
118.729 55.8709 117.905 57.0109 117.684 57.2219 cv
117.512 57.3849 117.596 57.5809 117.782 57.4389 cv
118.019 57.2589 119.012 55.9369 118.997 55.0069 cv
119.001 55.4519 119.101 57.6279 119.051 57.9099 cv
119.001 58.2069 119.23 58.1679 119.285 58.0109 cv
119.336 57.8579 119.254 55.6109 119.191 55.0609 cv
119.271 55.5619 120.071 57.0209 120.416 57.3539 cv
120.514 57.4469 120.681 57.3879 120.576 57.2339 cv
120.244 56.7459 119.507 55.6929 119.271 54.8439 cv
120.019 54.8089 121.049 54.4089 121.468 53.6859 cv
121.565 53.5189 121.664 53.3309 121.751 53.1249 cv
122.571 53.6239 123.354 54.7189 123.482 54.9859 cv
123.585 55.1979 123.797 55.1799 123.719 54.9599 cv
123.621 54.6789 122.671 53.3239 121.783 53.0519 cv
122.206 53.1859 124.307 53.7639 124.56 53.8959 cv
124.826 54.0369 124.861 53.8059 124.728 53.7079 cv
f
119.03 51.5385 mo
119.309 51.5385 119.509 51.7765 119.509 51.9385 cv
119.509 52.1795 119.281 52.3775 119.082 52.3775 cv
118.881 52.3775 118.655 52.1815 118.655 51.9505 cv
118.655 51.7275 118.849 51.5385 119.03 51.5385 cv
0 0 1 0 cmyk
f
117.934 51.2694 mo
118.185 51.2694 118.296 51.5554 118.296 51.7004 cv
118.296 51.9174 118.077 52.1244 117.897 52.1244 cv
117.716 52.1244 117.581 51.9214 117.581 51.7134 cv
117.581 51.5134 117.771 51.2694 117.934 51.2694 cv
f
118.195 52.4164 mo
118.447 52.4164 118.572 52.6284 118.572 52.7734 cv
118.572 52.9904 118.421 53.1704 118.241 53.1704 cv
118.06 53.1704 117.772 53.0394 117.772 52.8324 cv
117.772 52.6314 118.033 52.4164 118.195 52.4164 cv
f
119.4 52.8451 mo
119.652 52.8451 119.778 53.0571 119.778 53.2021 cv
119.778 53.4191 119.626 53.5991 119.447 53.5991 cv
119.266 53.5991 119.063 53.4231 119.063 53.2161 cv
119.063 53.0151 119.238 52.8451 119.4 52.8451 cv
f
120.17 52.0961 mo
120.421 52.0961 120.547 52.3081 120.547 52.4541 cv
120.547 52.6701 120.397 52.8501 120.217 52.8501 cv
120.035 52.8501 119.833 52.6741 119.833 52.4671 cv
119.833 52.2661 120.007 52.0961 120.17 52.0961 cv
f
119.93 50.8104 mo
120.182 50.8104 120.359 51.0784 120.359 51.2234 cv
120.359 51.4404 120.208 51.6204 120.029 51.6204 cv
119.847 51.6204 119.645 51.4444 119.645 51.2364 cv
119.645 51.0364 119.768 50.8104 119.93 50.8104 cv
f
121.144 50.8119 mo
121.388 50.8119 121.51 51.0179 121.51 51.1589 cv
121.51 51.3699 121.364 51.5449 121.189 51.5449 cv
121.014 51.5449 120.817 51.3739 120.817 51.1719 cv
120.817 50.9769 120.987 50.8119 121.144 50.8119 cv
f
120.24 49.764 mo
120.484 49.764 120.606 49.97 120.606 50.111 cv
120.606 50.321 120.459 50.496 120.285 50.496 cv
120.109 50.496 119.912 50.326 119.912 50.124 cv
119.912 49.929 120.082 49.764 120.24 49.764 cv
f
121.228 52.2113 mo
121.472 52.2113 121.594 52.4173 121.594 52.5583 cv
121.594 52.7683 121.406 53.0053 121.232 53.0053 cv
121.056 53.0053 120.9 52.7733 120.9 52.5713 cv
120.9 52.3763 121.069 52.2113 121.228 52.2113 cv
f
120.427 53.3768 mo
120.671 53.3768 120.931 53.5498 120.931 53.6908 cv
120.931 53.9008 120.658 54.1858 120.484 54.1858 cv
120.311 54.1858 120.066 54.0898 120.066 53.8998 cv
120.066 53.7048 120.269 53.3768 120.427 53.3768 cv
f
118.789 53.7494 mo
119.033 53.7494 119.322 54.0414 119.322 54.1834 cv
119.322 54.3944 119.104 54.5354 118.93 54.5354 cv
118.754 54.5354 118.557 54.3634 118.557 54.1624 cv
118.557 53.9674 118.631 53.7494 118.789 53.7494 cv
f
117.556 53.3939 mo
117.8 53.3939 118.021 53.5959 118.021 53.7369 cv
118.021 53.9479 117.776 54.1259 117.601 54.1259 cv
117.425 54.1259 117.228 53.9549 117.228 53.7539 cv
117.228 53.5589 117.398 53.3939 117.556 53.3939 cv
f
116.867 52.2142 mo
117.111 52.2142 117.233 52.4202 117.233 52.5612 cv
117.233 52.7712 117.087 52.9462 116.912 52.9462 cv
116.736 52.9462 116.54 52.7752 116.54 52.5742 cv
116.54 52.3792 116.709 52.2142 116.867 52.2142 cv
f
117.003 50.7611 mo
117.247 50.7611 117.369 50.9661 117.369 51.1081 cv
117.369 51.3181 117.153 51.5541 116.979 51.5541 cv
116.803 51.5541 116.675 51.3221 116.675 51.1211 cv
116.675 50.9261 116.845 50.7611 117.003 50.7611 cv
f
119.061 49.4564 mo
119.305 49.4564 119.426 49.6624 119.426 49.8034 cv
119.426 50.0134 119.281 50.1884 119.105 50.1884 cv
118.93 50.1884 118.733 50.0174 118.733 49.8164 cv
118.733 49.6214 118.904 49.4564 119.061 49.4564 cv
f
117.745 49.8124 mo
117.989 49.8124 118.111 50.0184 118.111 50.1594 cv
118.111 50.3704 117.964 50.5444 117.79 50.5444 cv
117.615 50.5444 117.417 50.3734 117.417 50.1724 cv
117.417 49.9774 117.587 49.8124 117.745 49.8124 cv
f
118.768 50.4701 mo
119.02 50.4701 119.145 50.6821 119.145 50.8271 cv
119.145 51.0441 118.994 51.2241 118.815 51.2241 cv
118.633 51.2241 118.431 51.0481 118.431 50.8411 cv
118.431 50.6391 118.606 50.4701 118.768 50.4701 cv
f
119.053 1.77869 mo
120.494 1.77869 121.09 2.71869 120.488 4.1637 cv
120.761 4.1637 120.883 3.8877 121.075 3.30969 cv
122.092 3.70367 122.249 4.88269 121.408 5.59369 cv
121.929 5.3537 122.364 5.38568 122.668 5.6207 cv
122.251 5.87268 122.122 6.0907 122.15 6.31567 cv
122.469 6.09567 122.741 5.84567 123.367 5.84567 cv
124.012 5.84567 124.675 6.2717 124.675 7.3017 cv
124.675 8.88867 123.688 9.03369 122.425 8.74667 cv
122.425 8.81268 122.65 9.09869 122.874 9.21469 cv
121.854 9.51868 120.611 9.23868 119.749 8.73569 cv
120.236 10.3117 122.644 10.9537 124.457 9.4697 cv
125.186 11.3787 128.146 11.6537 129.47 10.0437 cv
128.226 10.6117 126.869 10.2917 126.233 9.6817 cv
126.468 9.60968 126.896 9.43668 127.076 9.20068 cv
126.073 9.21268 125.62 8.82468 125.62 8.05267 cv
125.62 7.29269 126.418 6.44769 127.345 6.44769 cv
128.018 6.44769 128.34 6.90768 128.58 7.46667 cv
128.706 7.23569 128.714 6.71667 128.659 6.2937 cv
129.838 6.24268 130.063 6.97168 130.27 7.41968 cv
130.624 5.88867 131.647 4.78668 133.896 5.19269 cv
133.516 5.57068 133.238 5.9747 133.022 6.44968 cv
133.3 6.20868 133.67 5.89468 134.437 5.89468 cv
135.436 5.89468 135.965 6.58469 135.959 7.25668 cv
135.952 7.9787 135.505 8.47067 135.169 8.71368 cv
134.691 7.88968 134.061 7.77768 133.614 7.77768 cv
132.321 7.77768 131.76 8.3407 131.612 8.77969 cv
132.009 9.5307 131.527 10.1357 130.69 10.0487 cv
130.547 10.3207 129.646 11.9327 129.344 12.2917 cv
129.542 12.8857 129.493 13.6117 129.049 14.2647 cv
129.028 14.3967 128.943 15.0347 128.931 15.1657 cv
129.052 15.2257 129.216 15.4017 129.216 15.6187 cv
129.216 16.8987 124.664 17.3667 118.993 17.3667 cv
116.058 17.3667 108.754 17.0357 108.754 15.6867 cv
108.754 15.4507 108.88 15.3087 109.062 15.1877 cv
109.035 15.0967 108.988 14.3687 108.965 14.2877 cv
108.563 13.6327 108.548 12.9417 108.795 12.3997 cv
108.492 12.0417 107.512 10.3317 107.369 10.0597 cv
106.301 10.0697 106.166 9.35168 106.516 8.75568 cv
106.053 8.21667 105.441 7.73068 104.524 7.73068 cv
103.875 7.73068 103.406 7.8627 102.966 8.52667 cv
102.658 8.29468 102.269 7.95169 102.262 7.22968 cv
102.255 6.4187 102.974 5.92068 103.648 5.92068 cv
104.337 5.92068 104.771 6.19568 105.148 6.60269 cv
105.005 6.1727 104.598 5.51468 104.29 5.16568 cv
106.49 4.78769 107.483 5.95367 107.836 7.48468 cv
108.044 7.03668 108.387 6.20767 109.566 6.2587 cv
109.489 6.68268 109.468 7.05469 109.573 7.35568 cv
109.857 6.92969 110.125 6.42169 110.745 6.42169 cv
111.594 6.42169 112.524 7.4397 112.524 8.1727 cv
112.524 8.93369 111.993 9.26569 110.879 9.19568 cv
111.058 9.4317 111.349 9.60068 111.711 9.68768 cv
111.099 10.3267 109.838 10.5147 108.55 10.0147 cv
110.061 11.7787 112.9 11.2867 113.574 9.48367 cv
115.172 10.9767 117.886 10.3427 118.411 8.70468 cv
117.462 9.33469 116.251 9.44568 115.232 9.2417 cv
115.426 9.10669 115.592 8.88568 115.643 8.75568 cv
114.265 9.12567 113.473 8.71368 113.473 7.3367 cv
113.473 6.53168 114.05 5.89468 114.722 5.89468 cv
115.142 5.89468 115.594 6.05569 115.973 6.3407 cv
116.002 6.11569 115.902 5.91168 115.485 5.6597 cv
115.789 5.42468 116.177 5.3537 116.698 5.59369 cv
115.946 4.95169 115.995 3.6897 117.094 3.3107 cv
117.229 3.84167 117.375 4.1857 117.635 4.22168 cv
117.04 2.6897 117.612 1.77869 119.053 1.77869 cv
1 1 .2 0 cmyk
f
105.187 7.12341 mo
104.752 6.3804 104.192 6.2554 103.756 6.25842 cv
103.12 6.26343 102.636 6.75443 102.636 7.32941 cv
102.636 7.6344 102.748 7.88541 102.881 7.9964 cv
103.151 7.63742 103.67 6.9794 105.187 7.12341 cv
0 0 1 0 cmyk
f
135.249 8.01941 mo
135.409 7.8844 135.5 7.55441 135.5 7.2814 cv
135.5 6.68341 135.02 6.24841 134.343 6.2424 cv
133.655 6.2374 133.293 6.47241 132.876 7.05341 cv
134.449 6.94342 134.902 7.51242 135.249 8.01941 cv
f
118.98 17.0443 mo
123.251 17.0773 128.583 16.6203 128.583 15.7113 cv
128.583 15.1183 124.188 14.1623 119.019 14.1623 cv
113.774 14.1623 109.511 15.1133 109.511 15.7143 cv
109.511 16.2523 114.019 17.0063 118.98 17.0443 cv
f
118.98 17.0443 mo
123.251 17.0773 128.583 16.6203 128.583 15.7113 cv
128.583 15.1183 124.188 14.1623 119.019 14.1623 cv
113.774 14.1623 109.511 15.1133 109.511 15.7143 cv
109.511 16.2523 114.019 17.0063 118.98 17.0443 cv
f
107.503 9.74258 mo
107.689 10.0416 108.932 12.0286 109.093 12.2426 cv
109.626 12.3436 110.508 12.4706 110.792 12.5326 cv
111.13 12.6066 111.267 13.1536 110.96 13.3296 cv
110.671 13.4966 109.569 14.3406 109.384 14.4696 cv
109.393 14.6156 109.434 14.8926 109.442 15.0216 cv
111.927 14.1126 115.188 13.7836 119.046 13.7836 cv
123.718 13.7836 126.469 14.3166 128.574 15.0556 cv
128.601 14.8286 128.635 14.6736 128.659 14.3706 cv
127.937 13.9616 127.277 13.4846 127.026 13.2776 cv
126.764 13.0606 126.933 12.5746 127.174 12.5056 cv
127.684 12.3606 128.443 12.2166 129.076 12.0916 cv
129.137 12.0336 130.336 10.1256 130.587 9.67859 cv
130.655 9.46359 130.957 8.98859 131.222 8.84857 cv
131.705 7.77658 132.782 7.35159 134.369 7.59659 cv
133.823 7.21457 132.982 7.30258 132.669 7.3826 cv
132.602 7.3996 132.456 7.3826 132.466 7.23859 cv
132.658 6.49957 132.795 6.06158 133.195 5.48358 cv
131.168 5.37759 130.496 6.99658 130.437 8.00058 cv
130.43 8.11359 130.19 8.20859 130.161 8.0766 cv
130.024 7.44958 129.709 6.6756 128.954 6.55157 cv
128.96 7.0246 128.974 7.3866 128.796 7.69458 cv
128.69 7.87958 128.454 7.82858 128.416 7.7486 cv
128.147 7.17758 127.832 6.81058 127.463 6.81058 cv
126.86 6.81058 126.566 7.15759 126.765 7.4816 cv
126.843 7.60858 126.714 7.67657 126.575 7.63559 cv
126.274 7.54657 126.018 7.67859 126.018 8.15259 cv
126.018 8.72858 126.53 9.01358 127.325 8.92657 cv
127.519 8.90558 127.586 9.0376 127.498 9.17459 cv
127.414 9.30359 127.107 9.5676 126.895 9.6926 cv
127.073 9.83359 127.559 10.0076 128.333 10.0076 cv
129 10.0076 129.66 9.76559 129.913 9.54059 cv
130.027 9.43759 130.23 9.51758 130.13 9.78958 cv
129.605 11.2286 126.151 12.7266 124.282 10.0306 cv
122.702 11.1866 120.176 11.0146 119.353 8.78958 cv
119.259 8.53458 119.499 8.27359 119.784 8.45358 cv
119.991 8.58459 120.659 8.90659 121.316 8.99359 cv
121.566 9.02759 121.99 9.07959 122.272 9.01257 cv
122.155 8.86157 122.016 8.5976 121.988 8.52158 cv
121.935 8.37158 122.08 8.29257 122.253 8.39859 cv
122.431 8.50858 122.575 8.62759 123.018 8.62759 cv
123.763 8.62759 124.172 8.04959 124.172 7.8176 cv
124.172 7.50159 123.994 7.43259 123.769 7.39658 cv
123.662 7.37958 123.642 7.24359 123.717 7.20959 cv
123.949 7.10159 124.013 6.96957 124.013 6.75159 cv
124.013 6.47958 123.746 6.19958 123.235 6.19958 cv
122.819 6.19958 122.435 6.40958 122.166 6.54959 cv
122.088 6.59058 121.968 6.57059 121.909 6.47159 cv
121.843 6.31158 121.838 6.04559 122.088 5.68558 cv
121.761 5.61459 120.749 5.98257 119.893 6.80359 cv
119.757 6.93359 119.55 6.63757 119.665 6.56659 cv
120.814 5.86658 121.564 5.13757 121.564 4.52759 cv
121.564 4.17258 121.4 3.9296 121.203 3.79257 cv
120.996 4.25259 120.623 4.51859 120.387 4.51859 cv
120.28 4.51859 120.14 4.44058 120.169 4.35257 cv
120.217 4.20657 120.377 3.64359 120.377 3.26758 cv
120.377 2.69458 120.004 2.23459 119.646 2.23459 cv
119.383 2.23459 119.217 2.37558 119.158 2.53958 cv
119.121 2.64459 118.966 2.6366 118.917 2.53958 cv
118.805 2.31458 118.658 2.22757 118.436 2.22757 cv
118.049 2.22757 117.72 2.70358 117.72 3.25858 cv
117.72 3.75958 117.928 4.26959 117.929 4.36157 cv
117.93 4.45358 117.77 4.51059 117.663 4.51059 cv
117.267 4.51059 116.995 4.16458 116.904 3.79257 cv
116.691 3.88458 116.572 4.25659 116.572 4.54559 cv
116.572 5.22757 117.189 5.75259 118.441 6.58459 cv
118.554 6.65958 118.398 6.92859 118.251 6.80759 cv
117.312 6.03357 116.392 5.65359 116.066 5.72357 cv
116.309 6.1926 116.261 6.36258 116.195 6.52158 cv
116.153 6.59259 115.992 6.63159 115.92 6.59457 cv
115.651 6.45459 115.3 6.25058 114.982 6.25058 cv
114.453 6.25058 114.149 6.5676 114.149 6.95059 cv
114.149 7.01657 114.224 7.20459 114.437 7.28357 cv
114.502 7.30658 114.467 7.4256 114.389 7.43658 cv
114.162 7.47058 114.052 7.65857 114.052 7.8306 cv
114.052 8.22458 114.424 8.57559 114.971 8.57159 cv
115.414 8.5676 115.754 8.48657 115.928 8.34558 cv
116.084 8.21957 116.203 8.33759 116.138 8.48358 cv
116.105 8.55957 115.929 8.92358 115.865 9.04758 cv
116.655 9.1196 117.62 8.93558 118.349 8.47958 cv
118.619 8.31058 118.796 8.60358 118.763 8.77658 cv
118.455 10.3716 115.838 11.5736 113.8 10.1036 cv
111.735 12.5706 108.944 11.5286 107.988 9.81958 cv
107.886 9.6366 107.92 9.3476 108.179 9.57257 cv
108.511 9.8606 109.091 9.9986 109.817 9.9986 cv
110.437 9.9986 110.835 9.96457 111.175 9.73758 cv
110.877 9.60257 110.591 9.31659 110.508 9.18759 cv
110.419 9.0506 110.496 8.87659 110.689 8.90558 cv
111.764 9.06659 112.033 8.62158 112.03 8.27557 cv
112.025 7.80359 111.795 7.5506 111.441 7.64658 cv
111.247 7.69958 111.162 7.57959 111.222 7.4946 cv
111.443 7.17657 111.168 6.8136 110.657 6.8136 cv
110.288 6.8136 110.023 7.13058 109.725 7.58957 cv
109.65 7.7056 109.408 7.66357 109.34 7.54657 cv
109.21 7.31857 109.143 6.94659 109.238 6.52658 cv
108.552 6.63858 108.094 7.3476 107.936 8.07458 cv
107.909 8.19958 107.629 8.11658 107.622 7.9946 cv
107.572 7.16357 106.866 5.39658 104.962 5.47659 cv
105.357 6.01559 105.517 6.44357 105.691 7.22058 cv
105.702 7.36557 105.507 7.39258 105.438 7.3826 cv
105.008 7.32059 104.524 7.28357 103.928 7.57358 cv
104.905 7.41159 106.121 7.70059 106.876 8.81558 cv
107.103 8.91959 107.492 9.36258 107.503 9.74258 cv
f
118.714 10.6913 mo
118.714 10.6913 li
118.495 10.8893 117.968 11.2813 117.686 11.4753 cv
117.581 11.5463 117.522 11.6583 117.518 11.7923 cv
117.512 11.9363 117.572 12.0703 117.677 12.1533 cv
117.909 12.3353 118.389 12.7223 118.686 12.9773 cv
118.875 13.1393 119.199 13.1083 119.352 12.9743 cv
119.503 12.8393 120.193 12.3633 120.383 12.2463 cv
120.492 12.1803 120.555 12.0653 120.56 11.9213 cv
120.565 11.7663 120.501 11.6313 120.386 11.5523 cv
120.2 11.4233 119.602 10.9283 119.43 10.7313 cv
119.352 10.6413 119.231 10.5873 119.089 10.5803 cv
119.018 10.5753 118.839 10.5793 118.714 10.6913 cv
1 1 .2 0 cmyk
f
112.778 12.9296 mo
112.739 12.7526 112.677 12.3276 112.662 12.1846 cv
112.815 12.0976 112.929 11.9426 112.988 11.7526 cv
113.436 11.7026 114.416 11.5586 114.813 11.4966 cv
114.92 11.6446 115.118 11.7536 115.324 11.7846 cv
115.391 11.9946 115.443 12.4516 115.451 12.6136 cv
115.282 12.7296 115.156 12.9126 115.09 13.0516 cv
114.076 13.1606 113.388 13.2506 113.204 13.2796 cv
113.126 13.0946 113.004 12.9926 112.778 12.9296 cv
f
107.074 8.35339 mo
107.023 7.69638 106.518 6.5654 106.108 6.28738 cv
106.022 6.22839 105.892 6.22839 105.98 6.3194 cv
106.367 6.72238 106.733 7.77539 106.847 8.2424 cv
106.871 8.34039 107.084 8.47339 107.074 8.35339 cv
f
118.551 7.5238 mo
118.551 7.1918 118.784 6.9028 119.091 6.9028 cv
119.43 6.9028 119.595 7.17581 119.595 7.50879 cv
119.595 8.04681 119.357 8.16281 119.058 8.16281 cv
118.712 8.16281 118.551 7.84482 118.551 7.5238 cv
f
115.299 7.26791 mo
115.577 7.22693 117.712 7.27792 117.916 7.30191 cv
118.119 7.32593 118.098 7.54791 117.972 7.53891 cv
117.676 7.51892 115.573 7.37891 115.362 7.39493 cv
115.167 7.40991 115.158 7.28891 115.299 7.26791 cv
f
119.264 6.30508 mo
119.256 6.4061 118.939 6.42709 118.949 6.28009 cv
118.968 6.01108 119.025 3.70007 119.022 3.57507 cv
119.017 3.33408 119.178 3.32608 119.192 3.5611 cv
119.206 3.8111 119.276 6.15808 119.264 6.30508 cv
f
120.238 7.27579 mo
120.377 7.24478 122.594 7.32977 122.846 7.32678 cv
122.982 7.32578 123.001 7.46179 122.86 7.46878 cv
122.564 7.4838 120.566 7.47479 120.294 7.52579 cv
120.09 7.56479 120.044 7.31879 120.238 7.27579 cv
f
110.408 8.21909 mo
110.309 8.29309 108.065 9.01309 107.93 9.09207 cv
107.828 9.15109 107.746 8.94107 107.793 8.90808 cv
107.869 8.8541 110.278 8.14908 110.355 8.1131 cv
110.432 8.07608 110.498 8.15308 110.408 8.21909 cv
f
131.032 8.35339 mo
131.083 7.69638 131.646 6.6564 131.905 6.3324 cv
131.97 6.25339 132.106 6.26239 132.034 6.36539 cv
131.689 6.86038 131.373 7.77539 131.259 8.2424 cv
131.235 8.34039 131.022 8.47339 131.032 8.35339 cv
f
127.698 8.21909 mo
127.797 8.29309 129.894 8.98209 130.029 9.06009 cv
130.131 9.12009 130.214 8.9101 130.167 8.87708 cv
130.09 8.82309 127.828 8.14908 127.751 8.1131 cv
127.674 8.07608 127.608 8.15308 127.698 8.21909 cv
f
125.229 12.913 mo
125.268 12.736 125.33 12.311 125.344 12.169 cv
125.192 12.082 125.078 11.926 125.02 11.737 cv
124.572 11.686 123.59 11.542 123.194 11.48 cv
123.087 11.628 122.888 11.738 122.683 11.768 cv
122.617 11.978 122.564 12.435 122.555 12.598 cv
122.725 12.713 122.852 12.896 122.916 13.035 cv
123.93 13.144 124.619 13.234 124.802 13.263 cv
124.881 13.078 125.003 12.976 125.229 12.913 cv
f
119.018 14.5482 mo
124.664 14.5912 127.575 15.2762 127.571 15.7022 cv
127.568 15.9822 126.994 16.1162 126.919 16.1292 cv
126.803 16.1492 126.731 15.9682 126.842 15.9262 cv
126.99 15.8702 127.098 15.8102 127.098 15.7292 cv
127.098 15.4192 124.399 14.8812 119.016 14.8392 cv
114.469 14.8042 111.111 15.4302 111.108 15.7842 cv
111.107 15.8582 111.162 15.8562 111.296 15.8952 cv
111.375 15.9172 111.371 16.0722 111.283 16.0712 cv
111.009 16.0692 110.614 15.9532 110.616 15.7882 cv
110.622 15.1102 115.168 14.5182 119.018 14.5482 cv
f
118.904 10.8832 mo
118.934 10.8562 119.075 10.8432 119.12 10.8952 cv
119.318 11.1232 119.949 11.6412 120.136 11.7702 cv
120.189 11.8062 120.182 11.9362 120.149 11.9562 cv
119.955 12.0752 119.248 12.5612 119.071 12.7172 cv
119.045 12.7422 118.921 12.7612 118.87 12.7172 cv
118.577 12.4662 118.091 12.0742 117.849 11.8842 cv
117.801 11.8462 117.793 11.7272 117.841 11.6942 cv
118.133 11.4932 118.671 11.0942 118.904 10.8832 cv
0 0 1 0 cmyk
f
109.225 14.0536 mo
109.258 14.0806 109.326 14.0836 109.415 14.0236 cv
109.807 13.7346 110.425 13.2356 110.763 13.0376 cv
110.808 13.0166 110.776 12.8386 110.697 12.8326 cv
110.588 12.8256 109.66 12.6476 109.207 12.5746 cv
109.125 12.5666 109.066 12.5836 109.053 12.6466 cv
108.859 13.0316 108.895 13.6396 109.225 14.0536 cv
f
128.98 12.5092 mo
128.96 12.4662 128.891 12.4572 128.781 12.4702 cv
128.257 12.5302 127.4 12.7582 127.291 12.7842 cv
127.216 12.8032 127.189 12.9962 127.252 13.0252 cv
127.618 13.2392 128.279 13.7522 128.632 13.9302 cv
128.682 13.9552 128.715 13.9422 128.747 13.9202 cv
129.083 13.7382 129.163 12.8112 128.98 12.5092 cv
f
113.061 12.7758 mo
113.161 12.8088 113.204 12.8468 113.255 12.9268 cv
113.632 12.8678 114.486 12.7748 114.899 12.7298 cv
114.952 12.6388 115.004 12.5918 115.07 12.5488 cv
115.059 12.3578 115.023 12.0748 114.974 11.9168 cv
114.91 11.9008 114.82 11.8628 114.76 11.7858 cv
114.31 11.8568 113.549 11.9708 113.11 12.0198 cv
113.085 12.0868 113.052 12.1388 112.965 12.1968 cv
112.979 12.3228 113.023 12.6028 113.061 12.7758 cv
f
124.863 12.7738 mo
124.762 12.8068 124.719 12.8438 124.668 12.9248 cv
124.29 12.8658 123.438 12.7728 123.023 12.7278 cv
122.971 12.6368 122.919 12.5898 122.853 12.5468 cv
122.865 12.3558 122.899 12.0728 122.949 11.9148 cv
123.014 11.8988 123.103 11.8608 123.163 11.7838 cv
123.613 11.8548 124.375 11.9688 124.813 12.0178 cv
124.839 12.0848 124.87 12.1358 124.958 12.1938 cv
124.945 12.3208 124.9 12.6008 124.863 12.7738 cv
f
177.249 8.41049 mo
176.943 5.0545 176.562 4.17749 174.351 4.17749 cv
173.358 4.17749 li
173.358 14.2465 li
173.358 15.1425 173.759 15.2955 174.274 15.2955 cv
175.914 15.2955 li
175.914 15.9625 li
169.011 15.9625 li
169.011 15.2955 li
170.65 15.2955 li
171.166 15.2955 171.566 15.1425 171.566 14.2465 cv
171.566 4.17749 li
170.574 4.17749 li
168.362 4.17749 167.981 5.0545 167.676 8.41049 cv
167.046 8.41049 li
167.046 3.45248 li
177.878 3.45248 li
177.878 8.41049 li
cp
1 1 .2 0 cmyk
f
184.4 15.9623 mo
184.4 15.3333 li
185.009 15.3333 li
185.544 15.3333 185.944 15.1803 185.944 14.2843 cv
185.944 9.45932 li
185.944 9.04031 185.83 7.95331 184.629 7.95331 cv
182.969 7.95331 181.882 9.72632 181.882 11.5383 cv
181.882 14.2843 li
181.882 15.1803 182.283 15.3333 182.817 15.3333 cv
183.427 15.3333 li
183.427 15.9623 li
178.468 15.9623 li
178.468 15.3333 li
179.289 15.3333 li
179.823 15.3333 180.204 15.1613 180.204 14.2843 cv
180.204 5.13031 li
180.204 4.23431 179.803 4.08231 179.27 4.08231 cv
178.468 4.08231 li
178.468 3.4523 li
181.882 3.4523 li
181.882 8.81131 li
182.379 7.85831 183.427 7.05731 184.953 7.05731 cv
186.536 7.05731 187.489 8.1633 187.623 9.17331 cv
187.623 14.2843 li
187.623 15.1803 188.004 15.3333 188.538 15.3333 cv
189.358 15.3333 li
189.358 15.9623 li
cp
f
193.744 7.8197 mo
192.505 7.8197 191.646 9.09671 191.456 11.0997 cv
195.461 11.0997 li
195.613 9.76471 195.098 7.8197 193.744 7.8197 cv
193.84 16.1337 mo
190.788 16.1337 189.701 13.8837 189.701 12.0717 cv
189.701 9.61169 191.112 7.07571 193.686 7.07571 cv
195.937 7.07571 197.158 9.1167 197.196 11.5387 cv
196.948 11.8427 li
191.418 11.8427 li
191.418 14.1507 192.333 15.4287 194.088 15.4287 cv
195.956 15.4287 196.642 13.9027 196.624 12.7207 cv
197.31 12.7207 li
197.367 14.3417 196.394 16.1337 193.84 16.1337 cv
f
177.911 22.0902 mo
177.395 22.0902 177.015 22.2422 177.015 23.1392 cv
177.015 29.7942 li
177.015 31.4912 176.194 34.1992 172.59 34.1992 cv
169.596 34.1992 168.262 32.3312 168.071 30.8432 cv
168.071 23.1392 li
168.071 22.2422 167.689 22.0902 167.174 22.0902 cv
165.935 22.0902 li
165.935 21.4232 li
172.323 21.4232 li
172.323 22.0902 li
170.778 22.0902 li
170.264 22.0902 169.863 22.2422 169.863 23.1392 cv
169.863 30.1942 li
169.863 32.5602 171.503 33.3612 172.838 33.3612 cv
174.593 33.3612 176.042 32.2742 176.042 29.7942 cv
176.042 23.1392 li
176.042 22.2422 175.66 22.0902 175.145 22.0902 cv
173.678 22.0902 li
173.678 21.4232 li
179.15 21.4232 li
179.15 22.0902 li
cp
f
184.356 33.933 mo
184.356 33.303 li
184.966 33.303 li
185.5 33.303 185.901 33.151 185.901 32.236 cv
185.901 27.487 li
185.901 27.068 185.786 25.98 184.585 25.98 cv
182.925 25.98 182.048 27.754 182.048 29.585 cv
182.048 32.236 li
182.048 33.151 182.449 33.303 182.983 33.303 cv
183.593 33.303 li
183.593 33.933 li
178.634 33.933 li
178.634 33.303 li
179.455 33.303 li
179.989 33.303 180.37 33.151 180.37 32.236 cv
180.37 26.877 li
180.37 25.98 179.969 25.828 179.436 25.828 cv
178.616 25.828 li
178.616 25.199 li
181.915 25.199 li
182.029 26.896 li
182.525 25.923 183.364 25.084 184.909 25.084 cv
186.492 25.084 187.445 26.19 187.579 27.201 cv
187.579 32.236 li
187.579 33.132 187.96 33.303 188.494 33.303 cv
189.18 33.303 li
189.18 33.933 li
cp
f
191.984 23.6156 mo
191.412 23.6156 190.935 23.1006 190.935 22.4526 cv
190.935 21.8036 191.412 21.2896 191.984 21.2896 cv
192.556 21.2896 193.033 21.8036 193.033 22.4526 cv
193.033 23.1006 192.556 23.6156 191.984 23.6156 cv
189.733 33.9326 mo
189.733 33.3036 li
190.401 33.3036 li
190.935 33.3036 191.336 33.1506 191.336 32.2546 cv
191.336 26.8766 li
191.336 25.9806 190.935 25.8276 190.401 25.8276 cv
189.581 25.8276 li
189.581 25.1986 li
193.013 25.1986 li
193.013 32.2546 li
193.013 33.1506 193.414 33.3036 193.948 33.3036 cv
194.768 33.3036 li
194.768 33.9326 li
cp
f
203.598 25.828 mo
202.988 25.828 202.53 26.228 202.263 26.915 cv
199.441 33.933 li
198.697 33.933 li
196.084 26.915 li
195.76 26.037 195.284 25.828 194.693 25.828 cv
194.082 25.828 li
194.082 25.199 li
199.231 25.199 li
199.231 25.828 li
198.488 25.828 li
197.953 25.828 197.495 26.076 197.82 26.934 cv
199.613 31.816 li
201.348 27.22 li
201.615 26.534 201.615 25.828 200.776 25.828 cv
200.165 25.828 li
200.165 25.199 li
203.884 25.199 li
203.884 25.828 li
cp
f
207.945 25.7133 mo
206.706 25.7133 205.847 26.9913 205.657 28.9933 cv
209.662 28.9933 li
209.814 27.6583 209.299 25.7133 207.945 25.7133 cv
208.041 34.1993 mo
204.989 34.1993 203.902 31.8543 203.902 30.0423 cv
203.902 27.5823 205.313 24.9693 207.887 24.9693 cv
210.138 24.9693 211.359 27.0103 211.397 29.4323 cv
211.149 29.7373 li
205.619 29.7373 li
205.619 32.0453 206.534 33.4943 208.289 33.4943 cv
210.157 33.4943 210.843 31.9683 210.825 30.7863 cv
211.511 30.7863 li
211.568 32.4073 210.595 34.1993 208.041 34.1993 cv
f
218.395 28.0399 mo
217.785 28.0399 217.46 27.5249 217.46 27.0859 cv
217.46 26.3809 217.861 25.9229 218.415 25.7129 cv
216.984 25.4089 215.629 27.1439 215.629 29.5279 cv
215.629 32.2359 li
215.629 33.1319 216.031 33.3029 216.564 33.3029 cv
217.575 33.3029 li
217.575 33.9329 li
212.216 33.9329 li
212.216 33.3029 li
213.037 33.3029 li
213.57 33.3029 213.971 33.1129 213.971 32.2359 cv
213.971 26.8769 li
213.971 25.9799 213.57 25.8279 213.037 25.8279 cv
212.216 25.8279 li
212.216 25.1989 li
215.497 25.1989 li
215.591 26.7819 li
216.031 25.7899 216.946 24.9699 218.109 24.9699 cv
218.948 24.9699 219.54 25.6559 219.54 26.5909 cv
219.54 27.3919 219.101 28.0399 218.395 28.0399 cv
f
224.136 34.1996 mo
223.144 34.1996 222.133 33.6656 221.714 33.0556 cv
221.237 34.0666 li
220.665 34.0666 li
220.665 30.2906 li
221.237 30.2906 li
221.408 31.6636 222.381 33.4366 224.06 33.4366 cv
224.823 33.4366 225.623 33.0176 225.623 32.1596 cv
225.623 30.1186 220.627 30.6336 220.627 27.6776 cv
220.627 26.1716 221.695 24.9696 223.43 24.9696 cv
224.25 24.9696 225.089 25.3126 225.623 25.9046 cv
226.176 25.1036 li
226.615 25.1036 li
226.615 28.4406 li
226.042 28.4406 li
225.661 26.6096 224.727 25.7326 223.506 25.7326 cv
222.495 25.7326 222.019 26.3996 222.019 27.0486 cv
222.019 29.2226 227.111 28.5546 227.111 31.4916 cv
227.111 33.0936 225.871 34.1996 224.136 34.1996 cv
f
230.429 23.6156 mo
229.857 23.6156 229.379 23.1006 229.379 22.4526 cv
229.379 21.8036 229.857 21.2896 230.429 21.2896 cv
231 21.2896 231.478 21.8036 231.478 22.4526 cv
231.478 23.1006 231 23.6156 230.429 23.6156 cv
228.178 33.9326 mo
228.178 33.3036 li
228.846 33.3036 li
229.379 33.3036 229.781 33.1506 229.781 32.2546 cv
229.781 26.8766 li
229.781 25.9806 229.379 25.8276 228.846 25.8276 cv
228.026 25.8276 li
228.026 25.1986 li
231.458 25.1986 li
231.458 32.2546 li
231.458 33.1506 231.859 33.3036 232.393 33.3036 cv
233.213 33.3036 li
233.213 33.9326 li
cp
f
237.198 34.0853 mo
236.378 34.0853 235.195 33.5323 235.005 32.3503 cv
235.005 25.9993 li
233.689 25.9993 li
233.689 25.3133 li
234.909 25.0643 235.767 24.3593 235.882 21.4223 cv
236.664 21.4223 li
236.664 25.1983 li
239.258 25.1983 li
239.258 25.9993 li
236.664 25.9993 li
236.664 31.6823 li
236.664 32.5223 237.026 32.9793 237.713 32.9793 cv
238.475 32.9793 238.895 32.3883 238.895 31.6253 cv
238.895 28.9933 li
239.658 28.9933 li
239.658 31.9303 li
239.658 32.9603 238.819 34.0853 237.198 34.0853 cv
f
249.192 25.828 mo
248.582 25.828 248.143 26.209 247.857 26.896 cv
244.578 34.829 li
243.643 37.098 242.975 38.376 241.412 38.376 cv
240.591 38.376 239.924 37.708 239.924 36.812 cv
239.924 36.126 240.287 35.401 241.049 35.401 cv
241.469 35.401 241.888 35.859 241.888 36.431 cv
241.888 36.87 241.698 37.308 241.316 37.594 cv
242.365 37.937 243.567 36.145 244.158 33.647 cv
241.794 26.896 li
241.488 26.019 240.973 25.828 240.381 25.828 cv
239.963 25.828 li
239.963 25.199 li
244.902 25.199 li
244.902 25.828 li
244.176 25.828 li
243.643 25.828 243.205 26.057 243.509 26.915 cv
245.169 31.663 li
246.942 27.22 li
247.209 26.534 247.209 25.828 246.37 25.828 cv
245.665 25.828 li
245.665 25.199 li
249.478 25.199 li
249.478 25.828 li
cp
f
172.696 40.0038 mo
170.007 40.0038 169.072 42.8448 169.072 45.8578 cv
169.072 50.3588 171.171 51.3698 172.753 51.3698 cv
174.85 51.3698 176.185 49.1198 176.185 45.9918 cv
176.185 43.5888 175.518 40.0038 172.696 40.0038 cv
172.562 52.2088 mo
169.072 52.2088 167.147 48.8528 167.147 45.8778 cv
167.147 42.2538 169.435 39.1648 172.582 39.1648 cv
176.605 39.1648 178.112 43.3028 178.112 45.6488 cv
178.112 49.8058 175.614 52.2088 172.562 52.2088 cv
f
184.176 41.9491 mo
183.795 41.9491 183.357 41.6821 183.357 41.1291 cv
183.357 40.6901 183.642 40.3281 184.176 40.0991 cv
184.062 39.9471 183.795 39.8701 183.642 39.8701 cv
182.746 39.8701 182.231 40.5571 182.231 41.6251 cv
182.231 42.3681 182.403 43.3031 182.574 43.9511 cv
184.71 43.9511 li
184.71 44.7521 li
182.651 44.7521 li
182.651 50.2631 li
182.651 51.1591 183.051 51.3121 183.585 51.3121 cv
184.596 51.3121 li
184.596 51.9421 li
179.218 51.9421 li
179.218 51.3121 li
180.038 51.3121 li
180.572 51.3121 180.973 51.1591 180.973 50.2631 cv
180.973 44.7521 li
179.314 44.7521 li
179.314 43.9511 li
180.915 43.9511 li
180.781 43.3981 180.667 42.5401 180.667 42.1781 cv
180.667 40.5571 181.736 39.1651 183.509 39.1651 cv
184.672 39.1651 185.301 40.0611 185.301 40.6331 cv
185.301 41.5871 184.596 41.9491 184.176 41.9491 cv
f
173.177 70.2465 mo
171.518 70.2465 170.145 69.3885 169.63 68.5305 cv
168.848 69.9795 li
168.333 69.9795 li
168.333 64.4305 li
168.962 64.4305 li
169.268 66.9475 170.449 69.4835 173.043 69.4835 cv
174.474 69.4835 175.503 68.6835 175.503 67.3095 cv
175.503 63.1525 168.142 65.7655 168.142 60.6545 cv
168.142 59.1095 169.363 57.2025 171.823 57.2025 cv
173.463 57.2025 174.378 57.7745 175.103 58.5755 cv
175.675 57.2025 li
176.171 57.2025 li
176.171 62.4845 li
175.523 62.4845 li
175.275 59.8725 174.206 57.9655 172.032 57.9655 cv
169.954 57.9655 169.458 59.4725 169.458 60.1585 cv
169.458 64.0105 176.952 61.7225 176.952 66.4515 cv
176.952 68.9875 175.027 70.2465 173.177 70.2465 cv
f
183.436 69.9799 mo
183.436 69.3499 li
184.046 69.3499 li
184.58 69.3499 184.981 69.1979 184.981 68.3009 cv
184.981 63.5529 li
184.981 63.1329 184.866 62.0459 183.665 62.0459 cv
182.005 62.0459 181.128 63.8199 181.128 65.6319 cv
181.128 68.3009 li
181.128 69.1979 181.529 69.3499 182.063 69.3499 cv
182.673 69.3499 li
182.673 69.9799 li
177.714 69.9799 li
177.714 69.3499 li
178.535 69.3499 li
179.069 69.3499 179.451 69.1789 179.451 68.3009 cv
179.451 58.5189 li
179.451 57.6229 179.049 57.4699 178.516 57.4699 cv
177.714 57.4699 li
177.714 56.8399 li
181.128 56.8399 li
181.128 62.9049 li
181.624 61.9509 182.463 61.1499 183.989 61.1499 cv
185.572 61.1499 186.525 62.2559 186.66 63.2669 cv
186.66 68.3009 li
186.66 69.1979 187.04 69.3499 187.574 69.3499 cv
188.395 69.3499 li
188.395 69.9799 li
cp
f
192.876 61.7601 mo
191.636 61.7601 190.777 63.0381 190.587 65.0401 cv
194.592 65.0401 li
194.744 63.7051 194.23 61.7601 192.876 61.7601 cv
192.971 70.2461 mo
189.92 70.2461 188.833 67.9011 188.833 66.0891 cv
188.833 63.6291 190.244 61.0161 192.818 61.0161 cv
195.068 61.0161 196.289 63.0571 196.327 65.4791 cv
196.079 65.7841 li
190.549 65.7841 li
190.549 68.0921 191.464 69.5411 193.219 69.5411 cv
195.088 69.5411 195.774 68.0151 195.755 66.8331 cv
196.441 66.8331 li
196.499 68.4541 195.526 70.2461 192.971 70.2461 cv
f
202.468 59.3002 mo
202.086 59.3002 201.648 59.0332 201.648 58.4802 cv
201.648 58.0422 201.934 57.6792 202.468 57.4502 cv
202.354 57.2792 201.952 57.1072 201.514 57.1072 cv
200.427 57.1072 199.874 58.0232 199.874 58.9192 cv
199.874 59.6622 200.084 60.5972 200.217 61.2452 cv
202.144 61.2452 li
202.144 62.0462 li
200.275 62.0462 li
200.275 68.3012 li
200.275 69.1972 200.675 69.3502 201.209 69.3502 cv
202.03 69.3502 li
202.03 69.9802 li
197.032 69.9802 li
197.032 69.3502 li
197.662 69.3502 li
198.197 69.3502 198.597 69.1972 198.597 68.3012 cv
198.597 62.0462 li
197.128 62.0462 li
197.128 61.2452 li
198.559 61.2452 li
198.425 60.6932 198.311 59.8342 198.311 59.4722 cv
198.311 57.8512 199.608 56.4022 201.381 56.4022 cv
202.601 56.4022 203.593 57.2212 203.593 57.9852 cv
203.593 58.8812 203.002 59.3002 202.468 59.3002 cv
f
208.493 69.9799 mo
208.493 69.3499 li
209.237 69.3499 li
209.771 69.3499 210.172 69.1979 210.172 68.3009 cv
210.172 62.9429 li
210.172 62.0459 209.771 61.8939 209.237 61.8939 cv
208.417 61.8939 li
208.417 61.2459 li
211.849 61.2459 li
211.849 68.3009 li
211.849 69.1979 212.25 69.3499 212.784 69.3499 cv
213.414 69.3499 li
213.414 69.9799 li
cp
210.248 59.8339 mo
209.638 59.8339 209.199 59.3579 209.199 58.7669 cv
209.199 58.3469 209.447 57.8699 209.847 57.6409 cv
209.485 57.2029 208.932 57.0499 208.36 57.0499 cv
206.357 57.0499 205.442 58.7089 205.938 61.2459 cv
207.806 61.2459 li
207.806 62.0459 li
206.014 62.0459 li
206.014 68.3009 li
206.014 69.1979 206.415 69.3499 206.949 69.3499 cv
207.864 69.3499 li
207.864 69.9799 li
202.772 69.9799 li
202.772 69.3499 li
203.401 69.3499 li
203.935 69.3499 204.336 69.1979 204.336 68.3009 cv
204.336 62.0459 li
202.868 62.0459 li
202.868 61.2459 li
204.298 61.2459 li
203.841 58.9379 205.042 56.3449 208.36 56.3449 cv
210 56.3449 211.449 57.3749 211.449 58.3849 cv
211.449 59.3199 210.953 59.8339 210.248 59.8339 cv
f
218.028 61.7601 mo
216.789 61.7601 215.93 63.0381 215.74 65.0401 cv
219.745 65.0401 li
219.897 63.7051 219.382 61.7601 218.028 61.7601 cv
218.124 70.2461 mo
215.072 70.2461 213.985 67.9011 213.985 66.0891 cv
213.985 63.6291 215.396 61.0161 217.97 61.0161 cv
220.221 61.0161 221.442 63.0571 221.48 65.4791 cv
221.232 65.7841 li
215.702 65.7841 li
215.702 68.0921 216.617 69.5411 218.372 69.5411 cv
220.24 69.5411 220.926 68.0151 220.908 66.8331 cv
221.594 66.8331 li
221.651 68.4541 220.678 70.2461 218.124 70.2461 cv
f
222.071 69.9799 mo
222.071 69.3499 li
222.89 69.3499 li
223.425 69.3499 223.825 69.1979 223.825 68.3009 cv
223.825 58.5189 li
223.825 57.6229 223.425 57.4699 222.89 57.4699 cv
222.071 57.4699 li
222.071 56.8399 li
225.504 56.8399 li
225.504 68.3009 li
225.504 69.1789 225.904 69.3499 226.438 69.3499 cv
227.258 69.3499 li
227.258 69.9799 li
cp
f
232.33 61.8177 mo
231.015 61.8177 230.023 63.4767 230.023 65.4787 cv
230.023 68.1487 231.015 69.3317 232.235 69.3317 cv
233.761 69.3317 234.543 68.0157 234.543 65.7837 cv
234.543 63.9727 233.989 61.8177 232.33 61.8177 cv
235.706 69.9797 mo
235.076 69.9797 234.6 69.3497 234.581 68.7017 cv
234.143 69.4457 233.322 70.1507 232.083 70.1507 cv
229.775 70.1507 228.25 68.1297 228.25 65.6887 cv
228.25 63.9347 229.565 61.0357 232.33 61.0357 cv
233.132 61.0357 233.894 61.4357 234.409 62.1607 cv
234.409 58.5187 li
234.409 57.6227 234.009 57.4697 233.475 57.4697 cv
231.643 57.4697 li
231.643 56.8397 li
236.087 56.8397 li
236.087 68.2627 li
236.087 69.1787 236.469 69.3497 237.003 69.3497 cv
237.822 69.3497 li
237.822 69.9797 li
cp
f
240.168 70.1703 mo
239.501 70.1703 238.967 69.6173 238.967 68.9493 cv
238.967 68.2823 239.501 67.7293 240.168 67.7293 cv
240.835 67.7293 241.369 68.2823 241.369 68.9493 cv
241.369 69.6173 240.835 70.1703 240.168 70.1703 cv
f
132.698 40.6151 mo
132.597 37.6131 131.534 25.1651 131.476 20.6791 cv
131.472 20.3551 131.424 20.3461 131.175 20.3771 cv
131.032 20.3951 130.766 20.4221 130.392 20.4581 cv
130.392 20.4581 130.411 20.0671 130.392 19.9431 cv
130.375 19.8181 130.375 19.8001 130.215 19.8181 cv
130.085 19.8321 129.823 19.8461 129.51 19.8701 cv
129.51 19.5231 129.513 19.1831 129.521 18.8561 cv
128.886 19.0571 127.678 19.1371 127.122 19.1371 cv
124.889 19.1371 123.634 18.4421 121.886 18.4421 cv
121.113 18.4421 120.288 18.5321 119.457 18.8441 cv
119.209 18.9361 119.054 18.8741 118.885 18.7971 cv
118.714 18.7201 118.02 18.4421 116.954 18.4421 cv
115.227 18.4421 112.857 19.2071 110.843 19.2071 cv
109.732 19.2071 108.826 18.9231 108.359 18.6641 cv
108.35 18.9031 108.338 19.1831 108.323 19.4971 cv
108.063 19.4741 107.76 19.4461 107.661 19.4461 cv
107.51 19.4461 107.505 19.4451 107.505 19.6231 cv
107.505 19.7791 107.491 19.9201 107.478 20.1401 cv
107.344 20.1401 106.823 20.1021 106.69 20.0801 cv
106.518 20.0521 106.49 20.0711 106.49 20.3691 cv
106.49 20.5921 105.009 40.5621 105.009 40.9891 cv
105.009 41.5461 105.056 41.7171 105.667 41.5221 cv
106.825 41.1511 112.444 39.4201 116.888 39.9391 cv
116.508 41.3881 121.627 41.4081 121.422 39.9741 cv
125.474 39.4081 131.73 41.2741 132.175 41.3451 cv
132.619 41.4161 132.718 41.2011 132.698 40.6151 cv
f
118.444 39.4135 mo
117.86 39.1655 116.952 38.9165 114.599 38.9165 cv
110.778 38.9165 108.11 40.1265 106.175 39.8545 cv
106.053 39.8375 105.992 39.8195 105.999 39.6775 cv
106.307 33.6925 107.057 25.1705 107.46 20.5015 cv
107.331 20.5015 107.015 20.4675 106.944 20.4675 cv
106.874 20.4675 106.827 20.4675 106.827 20.5495 cv
106.827 20.6315 105.375 40.5335 105.363 40.7455 cv
105.351 40.9565 105.406 41.0495 105.571 41.0145 cv
105.736 40.9785 110.292 39.4935 114.54 39.4935 cv
115.387 39.4935 117.093 39.6225 117.199 39.6355 cv
117.305 39.6465 117.258 39.7055 117.247 39.7885 cv
117.089 40.8955 121.294 40.7175 121.059 39.8935 cv
121.036 39.8115 121.012 39.6935 121.153 39.6705 cv
121.295 39.6465 122.271 39.4935 123.448 39.4935 cv
126.775 39.4935 131.741 40.6505 131.929 40.6985 cv
132.118 40.7455 132.141 40.5805 132.141 40.4275 cv
132.141 40.2745 131.057 21.0195 131.057 20.9015 cv
131.057 20.7845 131.104 20.7135 130.998 20.7255 cv
130.892 20.7365 130.631 20.7375 130.525 20.7375 cv
130.463 24.3495 131.516 39.5205 131.516 39.6385 cv
131.516 39.7565 131.479 39.7605 131.386 39.7795 cv
131.111 39.8365 130.66 39.8715 130.17 39.8715 cv
128.512 39.8715 125.581 38.9405 122.895 38.9405 cv
121.685 38.9405 120.371 39.2775 119.858 39.4795 cv
119.315 39.6925 119 39.6485 118.444 39.4135 cv
0 0 1 0 cmyk
f
118.903 19.5756 mo
118.904 19.4806 118.848 19.3786 118.777 19.3206 cv
118.55 19.1346 117.996 18.7896 117.124 18.7896 cv
114.99 18.7896 112.939 19.7046 110.807 19.7046 cv
110.004 19.7046 109.426 19.5676 108.828 19.4416 cv
108.764 20.5136 107.73 36.5176 107.569 38.3516 cv
109.324 38.6796 111.187 37.4526 114.991 37.4526 cv
117.253 37.4526 118.745 38.1906 118.987 38.3186 cv
119.204 38.4316 119.286 38.4296 119.541 38.2966 cv
120.188 37.9576 121.766 37.4876 123.574 37.4876 cv
126.117 37.4876 128.494 38.7116 129.94 38.3416 cv
130.076 32.2216 128.933 24.5266 128.949 19.5056 cv
128.644 19.5476 127.672 19.6416 127.233 19.6416 cv
125.024 19.6416 123.683 18.8046 121.736 18.8046 cv
120.586 18.8046 119.831 19.2146 119.579 19.3976 cv
119.493 19.4606 119.485 19.4856 119.483 19.6136 cv
119.442 23.4986 119.445 34.0526 119.289 37.7146 cv
119.279 37.9376 118.938 37.8826 118.938 37.7226 cv
119.068 33.5816 118.869 23.0876 118.903 19.5756 cv
0 0 0 0 cmyk
f
130.066 20.3031 mo
130.064 20.2311 130.031 20.1971 129.96 20.2081 cv
129.912 20.2171 129.699 20.2191 129.512 20.2221 cv
129.556 26.1221 130.575 34.4761 130.395 38.9061 cv
128.737 39.2201 126.377 38.0961 123.433 38.0961 cv
120.762 38.0961 119.588 38.6391 119.469 38.6991 cv
119.348 38.7601 119.176 38.7441 119.016 38.6781 cv
118.389 38.4211 116.93 38.0811 114.945 38.0811 cv
110.664 38.0811 109.439 39.0271 107.151 38.8811 cv
107.466 33.6471 108.093 24.1001 108.305 19.8421 cv
108.194 19.8301 108.088 19.8191 108.018 19.8191 cv
107.877 19.8191 107.886 19.8431 107.877 19.9481 cv
107.415 25.2051 106.844 33.3321 106.436 39.2951 cv
106.426 39.4371 106.413 39.4361 106.506 39.4491 cv
108.875 39.7451 110.874 38.5641 114.564 38.5641 cv
116.497 38.5641 117.773 38.7891 118.78 39.2001 cv
119.155 39.3531 119.397 39.3461 119.794 39.1641 cv
120.695 38.7521 121.809 38.6111 122.847 38.6111 cv
126.347 38.6111 129.152 39.8191 131.049 39.5331 cv
131.146 39.5191 131.144 39.4511 131.144 39.3681 cv
131.144 39.2861 130.159 23.2641 130.066 20.3031 cv
f
110.094 26.181 mo
109.926 26.181 109.775 26.374 109.632 26.635 cv
109.607 27.72 109.548 29.486 109.455 30.781 cv
109.859 30.873 109.833 31.05 109.935 31.058 cv
110.01 31.058 110.044 31.05 110.103 31.008 cv
110.532 30.68 110.759 29.822 110.776 29.284 cv
110.826 27.4 110.38 26.181 110.094 26.181 cv
109.918 31.403 mo
109.699 31.395 109.581 31.26 109.447 31.252 cv
109.312 31.244 109.102 31.277 109.043 31.386 cv
108.992 31.555 108.875 31.504 108.875 31.353 cv
108.875 31.202 108.984 26.652 108.976 26.5 cv
108.959 26.122 108.925 26.03 108.589 26.13 cv
108.53 26.147 108.48 25.979 108.606 25.929 cv
108.673 25.895 109.506 25.618 109.581 25.618 cv
109.64 25.618 109.649 25.668 109.649 25.743 cv
109.649 25.836 109.649 25.996 109.64 26.206 cv
109.783 25.996 109.951 25.827 110.178 25.643 cv
110.271 25.567 110.346 25.508 110.464 25.576 cv
110.885 25.827 111.456 26.694 111.406 28.552 cv
111.389 29.158 110.557 31.437 109.918 31.403 cv
0 1 1 0 cmyk
f
112.314 26.9379 mo
112.23 27.1479 112.062 27.0469 112.054 26.9629 cv
112.045 26.8869 111.936 26.5679 111.91 26.4919 cv
111.877 26.3909 111.776 26.2729 111.734 26.2729 cv
111.691 26.2729 111.633 26.2229 111.717 26.1559 cv
111.759 26.1219 112.247 25.9369 112.39 25.9039 cv
112.44 25.8869 112.482 25.9369 112.465 25.9879 cv
112.457 26.0379 112.348 26.8369 112.314 26.9379 cv
112.297 31.1339 mo
112.264 31.3019 112.037 31.2599 112.037 31.1089 cv
112.037 30.9579 111.961 28.5779 111.936 28.4259 cv
111.894 28.1489 111.734 28.1069 111.532 28.0729 cv
111.465 28.0649 111.431 27.9299 111.549 27.8719 cv
111.616 27.8369 112.457 27.5179 112.533 27.5179 cv
112.592 27.5179 112.6 27.5689 112.6 27.6439 cv
112.608 28.1069 112.491 30.2339 112.297 31.1339 cv
1 1 .2 0 cmyk
f
113.643 31.0834 mo
113.214 31.0834 112.861 30.8064 112.76 30.6714 cv
112.718 30.6214 112.676 30.5874 112.735 30.5544 cv
112.793 30.5204 113.021 30.1334 113.063 30.0834 cv
113.096 30.0324 113.122 30.0834 113.138 30.1254 cv
113.247 30.4364 113.458 30.7974 113.752 30.7974 cv
113.937 30.7974 114.173 30.5034 114.173 30.1844 cv
114.173 29.7554 112.903 29.7634 112.903 28.6454 cv
112.903 28.3254 113.004 27.8714 113.677 27.4254 cv
113.769 27.3584 113.803 27.3504 113.836 27.3924 cv
113.853 27.4174 114.232 27.7284 114.451 27.8714 cv
114.526 27.9214 114.56 27.9134 114.535 27.9634 cv
114.493 28.0564 114.383 28.1654 114.299 28.2414 cv
114.248 28.2834 114.139 28.2834 114.097 28.2664 cv
113.937 28.1904 113.677 27.9634 113.584 27.8294 cv
113.567 27.8044 113.55 27.7954 113.534 27.8124 cv
113.366 27.9554 113.34 28.1234 113.34 28.3424 cv
113.34 28.9224 114.568 28.9814 114.568 29.7294 cv
114.568 30.2514 114.223 31.0834 113.643 31.0834 cv
f
115.737 31.0751 mo
115.064 31.0751 114.753 30.2841 114.753 29.4521 cv
114.753 28.7031 115.35 28.0061 115.695 27.6361 cv
115.779 27.5431 115.838 27.5181 115.871 27.5601 cv
115.888 27.5851 116.233 27.9971 116.426 28.1491 cv
116.451 28.1741 116.637 28.1401 116.586 28.2411 cv
116.544 28.3341 116.402 28.4931 116.309 28.5691 cv
116.233 28.6281 116.082 28.6451 116.023 28.5951 cv
115.855 28.4601 115.762 28.3341 115.653 28.1491 cv
115.636 28.1231 115.611 28.1151 115.602 28.1321 cv
115.417 28.3761 115.333 28.7121 115.333 29.0231 cv
115.333 30.1251 115.653 30.5871 116.065 30.5871 cv
116.3 30.5871 116.409 30.3771 116.544 30.1841 cv
116.595 30.1081 116.637 30.1921 116.603 30.2601 cv
116.36 30.7391 116.225 31.0751 115.737 31.0751 cv
f
117.544 28.0228 mo
117.494 27.9808 117.46 28.0058 117.443 28.0398 cv
117.275 28.3258 117.199 28.7038 117.199 29.0488 cv
117.199 29.2338 117.208 29.4018 117.225 29.5528 cv
117.477 29.3428 117.922 28.8888 117.922 28.5858 cv
117.922 28.3928 117.712 28.1568 117.544 28.0228 cv
117.636 31.0748 mo
116.964 31.0748 116.653 30.2848 116.653 29.4518 cv
116.653 28.7038 117.115 28.0058 117.46 27.6358 cv
117.544 27.5438 117.712 27.5438 117.763 27.5598 cv
117.931 27.6188 118.562 28.1488 118.562 28.5688 cv
118.562 28.7288 117.636 29.5108 117.258 29.7628 cv
117.368 30.3518 117.628 30.6128 117.939 30.6128 cv
118.267 30.6128 118.469 30.4528 118.621 30.2338 cv
118.671 30.1588 118.721 30.2518 118.688 30.3098 cv
118.419 30.8058 118.125 31.0748 117.636 31.0748 cv
f
121.135 26.08 mo
120.975 26.08 120.849 26.265 120.739 26.492 cv
120.739 27.527 120.723 29.326 120.664 30.672 cv
121.068 30.739 121.068 30.975 121.168 30.975 cv
121.244 30.975 121.27 30.966 121.328 30.915 cv
121.782 30.537 121.942 29.646 121.942 28.973 cv
121.942 26.778 121.463 26.08 121.135 26.08 cv
121.152 31.336 mo
120.933 31.336 120.807 31.202 120.672 31.202 cv
120.538 31.202 120.353 31.193 120.277 31.277 cv
120.252 31.353 120.109 31.437 120.109 31.252 cv
120.109 31.101 120.084 26.626 120.075 26.475 cv
120.059 26.164 119.957 26.072 119.68 26.122 cv
119.613 26.13 119.545 26.021 119.663 25.962 cv
119.731 25.929 120.496 25.601 120.572 25.601 cv
120.706 25.601 120.731 25.668 120.731 25.744 cv
120.731 26.105 li
120.865 25.904 121.026 25.735 121.253 25.542 cv
121.345 25.457 121.421 25.415 121.538 25.483 cv
122.161 25.828 122.598 26.661 122.598 28.603 cv
122.598 29.427 121.791 31.336 121.152 31.336 cv
0 1 1 0 cmyk
f
123.699 27.9808 mo
123.464 27.9808 123.321 28.3758 123.321 28.7038 cv
123.321 29.8478 123.808 30.5788 124.036 30.5788 cv
124.347 30.5788 124.481 30.2338 124.481 29.8728 cv
124.481 28.8718 124.019 27.9808 123.699 27.9808 cv
123.775 31.0748 mo
123.237 31.0748 122.825 30.2338 122.825 29.3768 cv
122.825 28.4768 123.506 27.5428 124.011 27.5428 cv
124.599 27.5428 124.986 28.4598 124.986 29.2338 cv
124.986 29.9738 124.313 31.0748 123.775 31.0748 cv
1 1 .2 0 cmyk
f
126.248 31.0751 mo
125.625 31.0751 125.264 30.1921 125.264 29.4521 cv
125.264 28.7031 125.727 27.9891 126.164 27.6271 cv
126.332 27.4921 126.349 27.4841 126.45 27.5941 cv
126.467 27.6191 126.736 27.9971 126.929 28.1491 cv
126.955 28.1741 127.106 28.1911 127.055 28.2921 cv
127.013 28.3841 126.895 28.5101 126.803 28.5861 cv
126.727 28.6451 126.584 28.6531 126.517 28.6111 cv
126.34 28.5101 126.231 28.2411 126.114 28.0731 cv
126.097 28.0481 126.08 28.0481 126.063 28.0561 cv
125.87 28.1991 125.786 28.4851 125.786 28.8301 cv
125.786 29.9311 126.164 30.5791 126.576 30.5791 cv
126.811 30.5791 126.963 30.4111 127.089 30.2261 cv
127.148 30.1421 127.206 30.2601 127.165 30.3261 cv
126.929 30.6971 126.736 31.0751 126.248 31.0751 cv
f
128.198 28.0648 mo
128.148 28.0228 128.114 28.0398 128.089 28.0648 cv
127.853 28.2748 127.761 28.7038 127.761 29.0488 cv
127.761 29.2168 127.778 29.3678 127.795 29.5028 cv
128.097 29.3598 128.543 29.0648 128.543 28.8048 cv
128.543 28.4848 128.426 28.2498 128.198 28.0648 cv
128.291 31.0748 mo
127.669 31.0748 127.215 30.3358 127.215 29.5788 cv
127.215 28.7628 127.66 28.0138 128.173 27.5858 cv
128.265 27.5098 128.384 27.5438 128.433 27.5598 cv
128.753 27.6688 129.249 28.3508 129.249 28.7958 cv
129.249 28.9558 128.24 29.5028 127.828 29.6878 cv
127.963 30.2678 128.291 30.5628 128.602 30.5628 cv
128.905 30.5628 129.132 30.4028 129.275 30.1838 cv
129.325 30.1078 129.384 30.2428 129.342 30.3018 cv
129.039 30.7388 128.779 31.0748 128.291 31.0748 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
